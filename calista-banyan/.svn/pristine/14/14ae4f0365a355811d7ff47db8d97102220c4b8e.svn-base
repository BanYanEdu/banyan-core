/*
 * ****************************************************************
 *      Copyright (c) 2018 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.erp.common.bo;

import com.inet.calista.erp.masterdata.data.ERPGroupTree;
import com.inet.calista.erp.masterdata.model.ERPGroup;
import com.inet.calista.erp.message.ERPGroupMessage;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.web.context.ContentContext;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.xdb.business.BaseDBStore;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.Query;
import com.inet.xportal.xdb.query.impl.QueryImpl;
import com.inet.xportal.xdb.query.impl.UpdateImpl;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;
import org.bson.types.ObjectId;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;

/**
 * com.inet.xportal.erp.bo.
 *
 * @author Phong Tran
 * @version $Id: ERPItemBO.java May 15, 2018 11:55 phongtt $
 * @since 1.0
 */
public abstract class ERPGroupBase<T extends ERPGroup> extends ERPBaseBO<T> {
    protected static final Logger logger = LoggerFactory.getLogger(ERPGroupBase.class);

    @Inject
    protected ERPGroupBase(@ContentContext(context = CONTENT_CONTEXT_NAME) MagicContentBF businessFacade) {
        super(businessFacade, "erp_md_item_group");
    }

    @Override
    public String add(final T info) throws WebOSBOException {
        return super.add(info, "organId", "name");
    }

    @Override
    public void update(String uuid, final T info) throws WebOSBOException {
        try {
            new ERPGroupMessage()
                    .update(info.getOrganId(), super.load(uuid), info)
                    .execute(logger);
        } catch (Throwable ex) {
            //TODO: ignore exception
        }


        super.update(uuid, info);
    }

    /**
     * @param oldOrgan
     * @param newOrgan
     * @throws WebOSBOException
     */
    public void changeOrgan(String oldOrgan, String newOrgan) throws WebOSBOException {
        final Query<JSONDB> select = new QueryImpl<JSONDB>()
                .field("organId").equal(oldOrgan);

        final UpdateImpl<JSONDB> update = new UpdateImpl<>();
        update.set("organId", newOrgan);

        super.update(update, (QueryImpl<JSONDB>) select);
    }

    /**
     * @param organId
     * @return
     * @throws WebOSBOException
     */
    public List<String> orphaned(String organId) throws WebOSBOException {
        final List<String> orphanedNodes = new ArrayList<>();

        final List<String> roots = roots(organId, StringUtils.EMPTY_STRING);
        logger.debug("found {} root(s)", roots.size());

        if (!CollectionUtils.isEmpty(roots)) {
            final List<String> nodes = new ArrayList<>();
            for (String root : roots) {
                nodes.add(root);
                child(nodes, organId, root);
            }

            logger.debug("found {} node(s)", nodes.size());

            final List<ObjectId> objectIds = new ArrayList<>();
            for (String uuid : nodes) {
                objectIds.add(BaseDBStore.getId(uuid));
            }

            if (!CollectionUtils.isEmpty(objectIds)) {
                final QueryImpl<JSONDB> query = new QueryImpl<>();
                query.field("organId").equal(organId);
                query.field(BaseDBStore.ID_KEY).notIn(objectIds);

                final SearchDTO<T> orphanedGroups = super.query(query);
                if (orphanedGroups != null && orphanedGroups.getTotal() > 0) {
                    for (T group : orphanedGroups.getItems()) {
                        orphanedNodes.add(group.getUuid());
                    }
                }
            }
        }

        logger.debug("found {} node(s) orphaned", orphanedNodes.size());

        return orphanedNodes;
    }

    /**
     * @param organId
     * @param uuid
     * @throws WebOSBOException
     */
    public void removeByOrgan(String organId, String uuid) throws WebOSBOException {
        final T group = loadByOrgan(organId, uuid);
        if (group != null) {
            super.remove(group.getUuid());
        }
    }

    /**
     * @param organId
     * @return
     */
    public ERPGroupTree<T> tree(String organId) {
        final ERPGroupTree<T> root = new ERPGroupTree<T>();
        root.setName("root");
        leafs(root, organId, "root");
        return root;
    }

    /**
     * @param tree
     * @param organId
     * @return
     */
    private void leafs(ERPGroupTree<T> tree, String organId, String parent) {
        if (tree == null) {
            tree = new ERPGroupTree<T>();
        }

        final QueryImpl<JSONDB> select = new QueryImpl<>();
        select.field("organId").equal(organId);
        if (StringUtils.hasLength(parent)) {
            if ("root".equals(parent)) {
                select.and(select.or(
                        select.criteria("parent").doesNotExist(),
                        select.criteria("parent").equal("")
                ));
            } else {
                select.field("parent").equal(parent);
            }
        }

        final SearchDTO<ERPGroupTree> data = super.query(select, ERPGroupTree.class);

        if (data != null && data.getTotal() > 0) {
            for (ERPGroupTree<T> child : data.getItems()) {
                leafs(child, organId, child.getUuid());
                tree.getChild().add(child);
            }
        }
    }

    /**
     * @param organId
     * @param keyword
     * @return
     */
    public List<String> roots(String organId, String keyword) {
        final QueryImpl<JSONDB> select = new QueryImpl<>();
        select.field("organId").equal(organId);
        select.add(select.or(
                select.criteria("parent").equal(""),
                select.criteria("parent").doesNotExist()
        ));

        if (StringUtils.hasLength(keyword))
            select.field("name").like(keyword);

        final List<String> roots = new ArrayList<>();
        final SearchDTO<T> datas = super.query(select);
        if (datas != null && datas.getTotal() > 0) {
            for (T group : datas.getItems()) {
                roots.add(group.getUuid());
            }
        }

        return roots;
    }

    /**
     * @param organId
     * @param uuid
     * @return
     */
    public List<String> nodes(String organId, String uuid) {
        final QueryImpl<JSONDB> select = new QueryImpl<>();
        select.field("organId").equal(organId);
        select.field(BaseDBStore.ID_KEY).equal(BaseDBStore.getId(uuid));

        final List<String> leafs = new ArrayList<>();
        final T root = super.load(select);
        if (root != null) {
            child(leafs, organId, root.getUuid());
        }

        return leafs;
    }

    /**
     * @param items
     * @param organId
     * @param parent
     * @return
     */
    private void child(final List<String> items, String organId, String parent) {
        final QueryImpl<JSONDB> select = new QueryImpl<>();
        select.field("organId").equal(organId);
        select.field("parent").equal(parent);
        final List<String> nodes = super.distinct(select);

        if (!CollectionUtils.isEmpty(nodes)) {
            items.addAll(nodes);
            logger.debug("parent {} have {} child", nodes.size());
            for (String node : nodes) {
                child(items, organId, node);
            }
        }
    }

    /**
     * @param organId
     * @param keyword
     * @param parent
     * @return
     * @throws WebOSBOException
     */
    public SearchDTO<T> queryByOrgan(String organId, String keyword, String parent) throws WebOSBOException {
        final QueryImpl<JSONDB> select = new QueryImpl<>();
        select.field("organId").equal(organId);

        if (StringUtils.hasLength(keyword))
            select.field("name").like(keyword);

        if (StringUtils.hasLength(parent)) {
            if (!parent.equals("root")) {
                select.field("parent").equal(parent);
            }
        } else {
            select.and(select.or(
                    select.criteria("parent").equal(""),
                    select.criteria("parent").doesNotExist()
            ));
        }

        return super.query(select);
    }

    /**
     * @param organId
     * @param groupName
     */
    public List<String> groupIDs(String organId, String groupName) {
        QueryImpl<JSONDB> query = new QueryImpl<>();
        query.field("organId").equal(organId);

        if (StringUtils.hasLength(groupName)) {
            query.field("name").equal(groupName);
        } else {
            query.and(query.or(
                    query.criteria("parent").equal(""),
                    query.criteria("parent").doesNotExist()
            ));
        }

        final List<String> groupIDs = new ArrayList<>();
        final List<String> nodes = super.distinct(query);
        if (!CollectionUtils.isEmpty(nodes)) {
            for (String node : nodes) {
                groupIDs.add(node);
                child(groupIDs, organId, node);
            }
        }

        return groupIDs;
    }

    /**
     * @param organId
     * @param groupName
     * @return
     */
    public List<String> groupNames(String organId, String groupName) {
        final List<String> groupIDs = groupIDs(organId, groupName);
        final List<String> groupNames = new ArrayList<>();
        for (String groupId : groupIDs) {
            groupNames.add(super.load(groupId).getName());
        }

        return groupNames;
    }

    /**
     * @param organId
     * @param uuid
     * @return
     * @throws WebOSBOException
     */
    public T loadByOrgan(String organId, String uuid) throws WebOSBOException {
        final QueryImpl<JSONDB> query = new QueryImpl<JSONDB>();
        query.field(BaseDBStore.ID_KEY).equal(BaseDBStore.getId(uuid));
        query.field("organId").equal(organId);
        return super.load(query);
    }

    /**
     * @param organId
     * @param name
     * @return
     * @throws WebOSBOException
     */
    public T loadByName(String organId, String name) throws WebOSBOException {
        final QueryImpl<JSONDB> query = new QueryImpl<JSONDB>();
        query.field("organId").equal(organId);
        query.field("name").equal(name);
        return super.load(query);
    }

    /**
     * @param organId
     * @param uuid
     * @return
     */
    public boolean exists(String organId, String uuid) {
        final QueryImpl<JSONDB> check = new QueryImpl<>();
        check.field("organId").equal(organId);
        check.field(BaseDBStore.ID_KEY).equal(BaseDBStore.getId(uuid));
        return super.count(check) > 0;
    }
}
