/*****************************************************************
   Copyright 2018 by Duyen Tang (tttduyen@inetcloud.vn)

   Licensed under the iNet Solutions Corp.,;
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.inetcloud.vn/licenses

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 *****************************************************************/
package com.inet.calista.collatask.bo.project;

import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import com.google.common.base.Strings;
import com.inet.calista.collatask.bo.CollaborationTaskBo;
import com.inet.calista.collatask.model.project.Phase;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.web.context.ContentContext;
import com.inet.xportal.web.interfaces.BeanInitiateInvoke;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.impl.QueryImpl;

/**
 * PhaseBo.
 *
 * @author Duyen Tang
 * @version $Id: PhaseBo.java Apr 4, 2018 3:40:30 PM tttduyen $
 *
 * @since 1.0
 */
@Named("collatask_phasebo")
public class PhaseBo extends CollaborationTaskBo<Phase> implements BeanInitiateInvoke {

  /**
   * Create {@link PhaseBo} instance
   * 
   * @param contentBf the given {@link MagicContentBF} instance
   */
  @Inject
  protected PhaseBo(@ContentContext(context = CONTENT_CONTEXT_NAME) MagicContentBF contentBf) {
    super(contentBf, "collatask_proj_phase");
  }
  
  /**
   * Find {@link Phase} from {@link Project} UUID
   * 
   * @param projectUuid the given {@link Project} UUID
   * @param status the given status
   * @return the list of {@link Phase}
   */
  public List<Phase> findByProjectUuid(String projectUuid, String status) {
    QueryImpl<JSONDB> query = new QueryImpl<>();
    query.field("projectUuid").equal(projectUuid);
    
    if (!Strings.isNullOrEmpty(status)) {
      query.field("status").equal(status);
    }
    
    return query(query).getItems();
  }
  
  /**
   * Delete {@link Phase} by {@link Project} UUID
   * 
   * @param projectUuid the given {@link Project} UUID
   */
  public void deleteByProjectUuid(String projectUuid) {
    QueryImpl<JSONDB> query = new QueryImpl<>();
    query.field("projectUuid").equal(projectUuid);
    
    remove(query);
  }

  @Override
  protected Class<Phase> getClassConvetor() {
    return Phase.class;
  }

  @Override
  public void init() {
    ensureIndex("projectUuid,status");
  }
}
