/*****************************************************************
   Copyright 2018 by Duyen Tang (tttduyen@inetcloud.vn)

   Licensed under the iNet Solutions Corp.,;
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.inetcloud.vn/licenses

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 *****************************************************************/
package com.inet.calista.collatask.bo;

import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;

import com.inet.calista.collatask.model.Attachment;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.web.context.ContentContext;
import com.inet.xportal.web.interfaces.BeanInitiateInvoke;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.impl.QueryImpl;

/**
 * AttachmentBo.
 *
 * @author Duyen Tang
 * @version $Id: AttachmentBo.java Jan 24, 2018 3:21:43 PM tttduyen $
 *
 * @since 1.0
 */
@Named("collatask_attachmentbo")
public class AttachmentBo extends CollaborationTaskBo<Attachment> implements BeanInitiateInvoke{

  /**
   * Create {@link AttachmentBo} from given information
   * 
   * @param contentBf the given {@link MagicContentBF} instance
   */
  @Inject
  protected AttachmentBo(@ContentContext(context = CONTENT_CONTEXT_NAME) MagicContentBF contentBf) {
    super(contentBf, "collatask_attachment");
  }
  
  /**
   * Find {@link Attachment} by reference UUID and reference type
   * 
   * @param refUuid the given reference UUID
   * @param refType the given reference type
   * @return the list of attachment
   */
  public List<Attachment> findByRefUuidAndType(String refUuid, String refType) {
    QueryImpl<JSONDB> query = new QueryImpl<>();
    query.field("refUuid").equal(refUuid)
         .field("refType").equal(refType);
    
    return query(query).getItems();
  }
  
  /**
   * Delete {@link Attachment} by reference UUID and reference type
   * 
   * @param refUuid the given reference UUID
   * @param refType the given reference type
   */
  public void deleteByRefUuidAndType(String refUuid, String refType) {
    QueryImpl<JSONDB> query = new QueryImpl<>();
    query.field("refUuid").equal(refUuid)
         .field("refType").equal(refType);
    
    remove(query);
  }
  
  @Override
  protected Class<Attachment> getClassConvetor() {
    return Attachment.class;
  }

  @Override
  public void init() {
    ensureIndex("refUuid,refType");
  }
}
