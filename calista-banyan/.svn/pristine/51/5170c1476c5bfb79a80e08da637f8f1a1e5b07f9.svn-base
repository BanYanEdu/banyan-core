/*****************************************************************
   Copyright 2018 by Duyen Tang (tttduyen@inetcloud.vn)

   Licensed under the iNet Solutions Corp.,;
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.inetcloud.vn/licenses

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 *****************************************************************/
package com.inet.calista.collatask.model.task;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import com.inet.calista.collatask.data.Executor;
import com.inet.calista.collatask.data.task.History;
import com.inet.calista.common.model.BaseModel;
import com.inet.calista.collatask.data.task.Process;

/**
 * Task.
 *
 * @author Duyen Tang
 * @version $Id: Task.java Jan 24, 2018 11:24:46 AM tttduyen $
 *
 * @since 1.0
 */
public class Task extends BaseModel {
  protected String name;
  protected String desc;
  protected long assignedDate = System.currentTimeMillis();
  protected long startDate;
  protected long deadline;
  //-1: low, 0: normal, 1: high; 2: urgent
  protected int priority;
  
  protected long completedDate;
  protected int progress;
  protected String status = Status.processing.name();
  
  protected String assignerUname;
  protected String assignerName;
  
  // the current assignee information
  protected Process assignee;
  
  protected String parentUuid;
  protected String parentName;
  protected boolean hasChild;
  
  protected String creatorUname;
  protected String creatorName;
  protected String orgCode;
  
  //the actual time, this will be auto calculate on all log times
  private double spentTime = 0;

  protected List<Process> processes;
  protected List<Executor> coordinators;
  protected List<Executor> watchers;
  protected List<History> histories;
  
  // the identifier of project
  protected String projectUuid;
  protected String phaseUuid;
  protected String phaseName;
  
  protected String refUuid;
  protected String refType;
  
  // Task from other application
  protected String application;
  protected String queryStr;

  /**
   * Create {@link Task} instance
   */
  public Task() {}

  /**
   * Create {@link Task} instance
   * 
   * @param name the given name
   * @param desc the given description
   * @param assignedDate the given assigned date
   * @param deadline the given deadline
   * @param creatorUname the given creator user name
   * @param creatorName the given creator name
   * @param orgCode the given organization code
   * @param application the given application
   * @param queryStr the given query
   */
  public Task(String name, String desc, long assignedDate, long deadline,
      String creatorUname, String creatorName, String orgCode,
      String application, String queryStr) {
    this.name = name;
    this.desc = desc;
    this.assignedDate = assignedDate;
    this.deadline = deadline;
    this.creatorUname = creatorUname;
    this.creatorName = creatorName;
    this.orgCode = orgCode;
    this.application = application;
    this.queryStr = queryStr;
  }

  /**
   * @return the name
   */
  public String getName() {
    return name;
  }

  /**
   * @param name the name to set
   */
  public void setName(String name) {
    this.name = name;
  }

  /**
   * @return the desc
   */
  public String getDesc() {
    return desc;
  }

  /**
   * @param desc the desc to set
   */
  public void setDesc(String desc) {
    this.desc = desc;
  }

  /**
   * @return the assignedDate
   */
  public long getAssignedDate() {
    return assignedDate;
  }

  /**
   * @param assignedDate the assignedDate to set
   */
  public void setAssignedDate(long assignedDate) {
    this.assignedDate = assignedDate;
  }

  /**
   * @return the startDate
   */
  public long getStartDate() {
    return startDate;
  }

  /**
   * @param startDate the startDate to set
   */
  public void setStartDate(long startDate) {
    this.startDate = startDate;
  }

  /**
   * @return the deadline
   */
  public long getDeadline() {
    return deadline;
  }

  /**
   * @param deadline the deadline to set
   */
  public void setDeadline(long deadline) {
    this.deadline = deadline;
  }

  /**
   * @return the priority
   */
  public int getPriority() {
    return priority;
  }

  /**
   * @param priority the priority to set
   */
  public void setPriority(int priority) {
    this.priority = priority;
  }

  /**
   * @return the completedDate
   */
  public long getCompletedDate() {
    return completedDate;
  }

  /**
   * @param completedDate the completedDate to set
   */
  public void setCompletedDate(long completedDate) {
    this.completedDate = completedDate;
  }

  /**
   * @return the progress
   */
  public int getProgress() {
    return progress;
  }

  /**
   * @param progress the progress to set
   */
  public void setProgress(int progress) {
    this.progress = progress;
  }

  /**
   * @return the status
   */
  public String getStatus() {
    return status;
  }

  /**
   * @param status the status to set
   */
  public void setStatus(String status) {
    this.status = status;
  }

  /**
   * @return the assignerUname
   */
  public String getAssignerUname() {
    return assignerUname;
  }

  /**
   * @param assignerUname the assignerUname to set
   */
  public void setAssignerUname(String assignerUname) {
    this.assignerUname = assignerUname;
  }

  /**
   * @return the assignerName
   */
  public String getAssignerName() {
    return assignerName;
  }

  /**
   * @param assignerName the assignerName to set
   */
  public void setAssignerName(String assignerName) {
    this.assignerName = assignerName;
  }

  /**
   * @return the assignee
   */
  public Process getAssignee() {
    return assignee;
  }

  /**
   * @param assignee the assignee to set
   */
  public void setAssignee(Process assignee) {
    this.assignee = assignee;
  }

  /**
   * @return the parentUuid
   */
  public String getParentUuid() {
    return parentUuid;
  }

  /**
   * @param parentUuid the parentUuid to set
   */
  public void setParentUuid(String parentUuid) {
    this.parentUuid = parentUuid;
  }

  /**
   * @return the parentName
   */
  public String getParentName() {
    return parentName;
  }

  /**
   * @param parentName the parentName to set
   */
  public void setParentName(String parentName) {
    this.parentName = parentName;
  }

  /**
   * @return the hasChild
   */
  public boolean isHasChild() {
    return hasChild;
  }

  /**
   * @param hasChild the hasChild to set
   */
  public void setHasChild(boolean hasChild) {
    this.hasChild = hasChild;
  }

  /**
   * @return the creatorUname
   */
  public String getCreatorUname() {
    return creatorUname;
  }

  /**
   * @param creatorUname the creatorUname to set
   */
  public void setCreatorUname(String creatorUname) {
    this.creatorUname = creatorUname;
  }

  /**
   * @return the creatorName
   */
  public String getCreatorName() {
    return creatorName;
  }

  /**
   * @param creatorName the creatorName to set
   */
  public void setCreatorName(String creatorName) {
    this.creatorName = creatorName;
  }

  /**
   * @return the orgCode
   */
  public String getOrgCode() {
    return orgCode;
  }

  /**
   * @param orgCode the orgCode to set
   */
  public void setOrgCode(String orgCode) {
    this.orgCode = orgCode;
  }

  /**
   * @return the spentTime
   */
  public double getSpentTime() {
    return spentTime;
  }

  /**
   * @param spentTime the spentTime to set
   */
  public void setSpentTime(double spentTime) {
    this.spentTime = spentTime;
  }

  /**
   * @return the processes
   */
  public List<Process> getProcesses() {
    return processes;
  }

  /**
   * @param processes the processes to set
   */
  public void setProcesses(List<Process> processes) {
    this.processes = processes;
  }

  /**
   * Add given {@link Process} to list
   * 
   * @param process the given {@link Process}
   */
  public void addProcess(Process process) {
    if (this.processes == null) {
      this.processes = new ArrayList<>();
    }
    
    this.processes.add(process);
  }
  
  /**
   * @return the coordinators
   */
  public List<Executor> getCoordinators() {
    return coordinators;
  }

  /**
   * @param coordinators the coordinators to set
   */
  public void setCoordinators(List<Executor> coordinators) {
    this.coordinators = coordinators;
  }

  /**
   * @return the watchers
   */
  public List<Executor> getWatchers() {
    return watchers;
  }

  /**
   * @param watchers the watchers to set
   */
  public void setWatchers(List<Executor> watchers) {
    this.watchers = watchers;
  }
  
  /**
   * Add watcher for this task
   * 
   * @param watcher the new watcher
   */
  public void addWatcher(Executor watcher) {
    if (this.watchers == null) {
      this.watchers = new LinkedList<>();
    }
    
    this.watchers.add(watcher);
  }

  /**
   * @return the histories
   */
  public List<History> getHistories() {
    return histories;
  }

  /**
   * @param histories the histories to set
   */
  public void setHistories(List<History> histories) {
    this.histories = histories;
  }

  /**
   * Add given history to list
   * 
   * @param history the given history
   */
  public void addHistory(History history) {
    if (this.histories == null) {
      this.histories = new ArrayList<>();
    }
    
    this.histories.add(history);
  }

  /**
   * @return the projectUuid
   */
  public String getProjectUuid() {
    return projectUuid;
  }

  /**
   * @param projectUuid the projectUuid to set
   */
  public void setProjectUuid(String projectUuid) {
    this.projectUuid = projectUuid;
  }

  /**
   * @return the phaseUuid
   */
  public String getPhaseUuid() {
    return phaseUuid;
  }

  /**
   * @param phaseUuid the phaseUuid to set
   */
  public void setPhaseUuid(String phaseUuid) {
    this.phaseUuid = phaseUuid;
  }

  /**
   * @return the phaseName
   */
  public String getPhaseName() {
    return phaseName;
  }

  /**
   * @param phaseName the phaseName to set
   */
  public void setPhaseName(String phaseName) {
    this.phaseName = phaseName;
  }

  /**
   * @return the refUuid
   */
  public String getRefUuid() {
    return refUuid;
  }

  /**
   * @param refUuid the refUuid to set
   */
  public void setRefUuid(String refUuid) {
    this.refUuid = refUuid;
  }

  /**
   * @return the refType
   */
  public String getRefType() {
    return refType;
  }

  /**
   * @param refType the refType to set
   */
  public void setRefType(String refType) {
    this.refType = refType;
  }
  
  /**
   * @return the application
   */
  public String getApplication() {
    return application;
  }

  /**
   * @param application the application to set
   */
  public void setApplication(String application) {
    this.application = application;
  }

  /**
   * @return the queryStr
   */
  public String getQueryStr() {
    return queryStr;
  }

  /**
   * @param queryStr the queryStr to set
   */
  public void setQueryStr(String queryStr) {
    this.queryStr = queryStr;
  }

  /**
   * Status.
   *
   * @author Duyen Tang
   * @version $Id: Task.java Jan 26, 2018 10:12:34 AM tttduyen $
   *
   * @since 1.0
   */
  public enum Status {
    waiting,
    processing,
    completed,
    destroy;
    
    /**
     * Check given status is a processing status or not
     * 
     * @param status the given status to check
     * @return processing or not
     */
    public static boolean isProcessing(String status) {
      return processing.name().equals(status) || waiting.name().equals(status);
    }
    
    /**
     * Return the list of processing status
     * 
     * @return the result
     */
    public static List<String> getProcessingStatus() {
      return Arrays.asList(Task.Status.waiting.name(), Task.Status.processing.name());
    }
  }
}
