/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.ecommerce.service.saleecm;

import com.inet.calista.ecommerce.ECMConstant;
import com.inet.calista.ecommerce.data.ECMSaleItem;
import com.inet.calista.ecommerce.model.ECMSaleWeb;
import com.inet.calista.erp.message.ERPBookMessage;
import com.inet.xportal.sphere.model.CMSFirm;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.data.OrganizationDTO;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Named;
import java.util.Map;

/**
 * com.inet.platform.pos.service.saleretail.
 *
 * @author Phong Tran
 * @version $Id: SaleItemUpdateService.java Jun 07, 2018 14:53 phongtt $
 * @since 1.0
 */
@Named("commercesaleitemupdate")
@XPortalDataService(roles = {ECMConstant.ROLE_SALE}, description = ECMConstant.ROLE_SALE_DESCRIPTION)
@XPortalPageRequest(uri = "commerce/sale/item/update",
        inherit = true,
        transaction = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class SaleItemUpdateService extends ECMSaleRetailAbstraction {

    /*
     * (non-Javadoc)
     * @see com.inet.xportal.ecommerce.cmsservice.ProductContentBase#service(com.inet.xportal.sphere.model.CMSFirm, com.inet.xportal.web.data.OrganizationDTO, com.inet.xportal.ecommerce.model.CommerceProduct, com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected WebDataService service(final CMSFirm cmsfirm,
                                     final OrganizationDTO orgItem,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String organId = orgItem.getOrganId();
        String infoCode = XParamUtils.getString("infoCode", params, StringUtils.EMPTY_STRING);
        String outletId = StringUtils.EMPTY_STRING;

        final ECMSaleWeb info = invoiceLoad(organId, infoCode);
        if (info == null) {
            logger.error("sale invoice isn't create");
            action.fieldError("SALEWEB", "INFO_NOT_FOUND");
        }

        String itemId = XParamUtils.getString("itemId", params, StringUtils.EMPTY_STRING);
        if (!StringUtils.hasLength(itemId)) {
            logger.error("sale item is required");
            action.fieldError("SALEWEB", "ITEMID_NOT_FOUND");
        }

        final ECMSaleItem item = action
                .getModel(ECMSaleItem.class)
                .withUuid(itemId);

        itemCheck(item, action);

        if (!CollectionUtils.isEmpty(info.getItems())) {
            logger.debug("lookup item {}", itemId);

            int index = info.getItems().indexOf(item);
            logger.debug("found at {}", index);

            if (index >= 0) {
                final ECMSaleItem itemIndex = info.getItems().get(index);

                info.getItems().remove(item);

                if (item.getQty() > 0) {
                    itemIndex.setQty(item.getQty());
                    itemIndex.calc();
                    info.getItems().add(0, itemIndex);
                }

                info.calc();
                saleEcmBO.update(info.getUuid(), info);

                //fire event message
                new ERPBookMessage()
                        .withModule(saleEcmBO.getModule())
                        .withOrganId(organId)
                        .withOutletId(outletId)
                        .withVoucherId(info.getCode())
                        .execute();
            }
        }

        return new ObjectWebDataservice<>(info);
    }
}
