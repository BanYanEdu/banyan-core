package com.inet.calista.global.bo.contact;

import com.inet.calista.global.bo.GLNoSqlBo;
import com.inet.calista.global.constant.CommonConstant;
import com.inet.calista.global.dto.SearchCriteria;
import com.inet.calista.global.dto.search.QSearchCriteria;
import com.inet.calista.global.model.common.Address;
import com.inet.calista.global.model.contact.ContactInfo;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.web.context.ContentContext;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.BeanInitiateInvoke;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.CriteriaContainer;
import com.inet.xportal.xdb.query.impl.QueryImpl;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ContactInfoBo.
 *
 * @author thoangtran
 * @version ContactInfoBo 2018 04-14 09:37
 */
@Named("gl.ContactInfoBo")
@Slf4j
public class ContactInfoBo extends GLNoSqlBo<ContactInfo> implements BeanInitiateInvoke {

    @Inject
    public ContactInfoBo(@ContentContext(context = CONTENT_CONTEXT_NAME) MagicContentBF contentBf) {
        super(contentBf, ContactInfo.COLLECTION_NAME);
    }

    @Override
    public String add(final ContactInfo model) throws WebOSBOException {
        if (StringUtils.hasLength(model.getUserCode())) {
            final ContactInfo data = loadByUserCode(model.getUserCode());
            logger.debug("found ContactInfo {} with userCode {}", data, model.getUserCode());

            if (data != null) {
                return data.getUuid();
            }
        }

        return super.add(model);
    }

    /**
     * Quick search criteria
     *
     * @param criteria
     * @return
     */
    public SearchDTO<ContactInfo> search(SearchCriteria<QSearchCriteria> criteria) {
        final QueryImpl<JSONDB> query = new QueryImpl<>();
        query.field("deleted").notEqual(true);
        QSearchCriteria qSearchCriteria = criteria.getCriteria();
        if (null != qSearchCriteria && StringUtils.hasLength(qSearchCriteria.getKeyword())) {
            query.or(
                    query.criteria("lastName").startsWith(qSearchCriteria.getKeyword()),
                    query.criteria("firstName").startsWith(qSearchCriteria.getKeyword()),
                    query.criteria("mobilePhone").startsWith(qSearchCriteria.getKeyword()),
                    query.criteria("description").startsWith(qSearchCriteria.getKeyword())
            );
        }
        pagination(query, criteria.getPageNumber(), criteria.getPageSize());
        return this.query(query);
    }

    /**
     * Save or update contact
     *
     * @param contact
     * @return
     */
    public ContactInfo saveOrUpdate(ContactInfo contact) {

        if (StringUtils.hasLength(contact.getUuid()) && super.existById(contact.getUuid())) {
            this.update(contact.getUuid(), contact);
        } else
            contact.setUuid(this.add(contact));

        return contact;
    }

    /**
     * @param key
     * @param term
     * @return
     */
    public SearchDTO<ContactInfo> findBy(String key, String term) {
        final QueryImpl<JSONDB> query = new QueryImpl<>();
        query.field("deleted").notEqual(true);
        if (CommonConstant.PRIMARY_EMAIL.equals(key)) {
            query.field(CommonConstant.PRIMARY_EMAIL).equal(term);
        } else if (CommonConstant.TAX_CODE.equals(key)) {
            query.field(CommonConstant.TAX_CODE).equal(term);
        }
        if (CommonConstant.MOBILE_PHONE.equals(key)) {
            query.field(CommonConstant.MOBILE_PHONE).equal(term);
        } else {
            query.field(key).like(term);
        }
        return this.query(query);
    }

    /**
     * Load Contact info by canon Id
     *
     * @return
     */
    public ContactInfo loadByUserCode(String userCode) {
        final QueryImpl<JSONDB> query = new QueryImpl<>();
        query.field(CommonConstant.USER_CODE).equal(userCode);
        return this.load(query);
    }

    /**
     * Load Contact info by canon Id
     *
     * @return
     */
    public ContactInfo verifyUserCode(String userCode) {
        final QueryImpl<JSONDB> query = new QueryImpl<>();
        query.field(CommonConstant.USER_CODE).equal(userCode);
        query.retrievedFields(true, "userCode", "primaryEmail", "firstName", "middleName", "lastName", "sex");

        return this.load(query);
    }

    /**
     * @param userCodes
     * @param keyword
     * @return
     */
    public SearchDTO<ContactInfo> queryByUserCode(String userCodes, String keyword) {
        List<String> users = new ArrayList<>();
        if (StringUtils.hasLength(userCodes)) {
            users = CollectionUtils.asList(userCodes.split(","));
        }
        return this.queryByUserCode(users, keyword);
    }

    /**
     * @param users
     * @param keyword
     * @return
     */
    public SearchDTO<ContactInfo> queryByUserCode(final List<String> users, String keyword) {
        return this.queryByUserCode(users, keyword, 0, 0);
    }

    /**
     * @param users
     * @param keyword
     * @param limit
     * @param offset
     * @return
     */
    public SearchDTO<ContactInfo> queryByUserCode(final List<String> users, String keyword, int limit, int offset) {
        final QueryImpl<JSONDB> condition = new QueryImpl<>();
        final CriteriaContainer container = condition.or();

        if (!CollectionUtils.isEmpty(users)) {
            container.add(condition.criteria(CommonConstant.USER_CODE).in(users));
        } else {
            container.add(condition.criteria(CommonConstant.USER_CODE).like(keyword));
        }

        if (StringUtils.hasLength(keyword)) {
            container.add(condition.criteria("officePhone").like(keyword));
            container.add(condition.criteria("mobilePhone").like(keyword));
            container.add(condition.criteria("primaryEmail").like(keyword));
            container.add(condition.criteria("fullName").like(keyword));
        }

        final QueryImpl<JSONDB> query = new QueryImpl<>();
        query.and(container);

        if (limit > 0) {
            query.limit(limit);
        }

        if (offset >= 0) {
            query.offset(offset);
        }

        //.field(CommonConstant.USER_CODE).in(users);
        return this.query(query);
    }

    @Override
    protected Class<ContactInfo> getClassConvetor() {
        return ContactInfo.class;
    }

    @Override
    protected Map<String, Class<?>> childrenConvertMap() {
        final Map<String, Class<?>> children = new HashMap<>();
        children.put("address", Address.class);
        return super.childrenConvertMap();
    }

    @Override
    public void init() {
        createIndex();
    }

    private void createIndex() {
        ensureIndex("userCode");
        ensureIndex("lastName,firstName,mobilePhone,description,deleted");
    }
}
