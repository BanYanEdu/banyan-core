/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.global.dataservice;

import com.inet.calista.common.CalistaConstant;
import com.inet.calista.global.bo.GlbContactBO;
import com.inet.calista.global.bo.GlbInvitationBO;
import com.inet.calista.global.model.GlbContact;
import com.inet.calista.global.model.GlbInvitation;
import com.inet.calista.global.model.GlbOrganization;
import com.inet.xportal.nosql.web.NoSQLConstant;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.cache.XUriManager;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.*;
import org.apache.shiro.util.StringUtils;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * com.inet.calista.global.service.contact.profile.
 *
 * @author Phong Tran
 * @version $Id: InvitationProfileService.java Nov 09, 2018 10:18 phongtt $
 * @since 1.0
 */
@Named("glcontactprofileinvitation")
@XPortalDataService(roles = {NoSQLConstant.ROLE_SUBADMIN}, description = CalistaConstant.ROLE_SUB_ADMIN_DESC)
@XPortalPageRequest(uri = "gl/contact/profile/invitation",
        inherit = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class OrganInviteSendService extends GlbAbstraction {
    @Inject
    private GlbContactBO contactBO;

    @Inject
    private GlbInvitationBO inviteBO;

    @Override
    protected WebDataService service(final SiteDataModel site,
                                     final SubFirmProfile subFirm,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String organId = getOrganId(site, subFirm);

        String sendBy = SecurityUtil.getPrincipal();
        final GlbContact contact = contactBO.loadByUserCode(sendBy);

        String emails = XParamUtils.getString("emails", params, StringUtils.EMPTY_STRING);
        String users = XParamUtils.getString("users", params, StringUtils.EMPTY_STRING);
        String phones = XParamUtils.getString("phones", params, StringUtils.EMPTY_STRING);

        final List<GlbInvitation> invites = new ArrayList<>();
        if (StringUtils.hasLength(emails)) {
            for (String email : emails.split(";")) {
                final GlbInvitation existsInvite = inviteBO.checkEmailInvite(organId, email);
                if (existsInvite == null) {
                    String username = StringUtils.EMPTY_STRING;
                    String phone = StringUtils.EMPTY_STRING;

                    String fName = XParamUtils.getString("firstName", params, StringUtils.EMPTY_STRING);
                    String mName = XParamUtils.getString("middleName", params, StringUtils.EMPTY_STRING);
                    String lName = XParamUtils.getString("lastName", params, StringUtils.EMPTY_STRING);

                    invites.add(sendInvite(organId, contact,
                            username, email, phone,
                            fName, mName, lName,
                            action, params));
                } else {
                    invites.add(existsInvite);
                }
            }
        } else if (StringUtils.hasLength(users)) {
            for (String username : users.split(";")) {
                final GlbInvitation existsInvite = inviteBO.checkUserInvite(organId, username);
                if (existsInvite == null) {
                    final GlbContact receiver = contactBO.loadByUserCode(username);
                    if (receiver != null) {
                        String email = receiver.getUserCode();
                        if (StringUtils.hasLength(receiver.getPrimaryEmail())) {
                            email = receiver.getPrimaryEmail();
                        }
                        String phone = receiver.getHomePhone();

                        String fName = receiver.getFirstName();
                        String mName = receiver.getMiddleName();
                        String lName = receiver.getLastName();

                        invites.add(sendInvite(organId, contact,
                                username, email, phone,
                                fName, mName, lName,
                                action, params));
                    }
                } else {
                    invites.add(existsInvite);
                }
            }
        }

        return new ObjectWebDataservice<>(new SearchDTO<>(invites, invites.size()));
    }

    /**
     * @param organId
     * @param contact
     * @param username
     * @param email
     * @param phone
     * @param fName
     * @param mName
     * @param lName
     * @param action
     * @param params
     * @return
     */
    private GlbInvitation sendInvite(String organId, final GlbContact contact,
                                     String username, String email, String phone,
                                     String fName, String mName, String lName,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) {
        String category = "ORGAN-INVITATION";

        final GlbInvitation invite = new GlbInvitation();
        invite.setSendBy(contact.getUserCode());
        invite.setSender(contact.getFullName());
        invite.setSendDate(System.currentTimeMillis());

        invite.setOrganId(organId);
        invite.setCode(StringUUID.uniqueToken());

        invite.setUsername(username);
        invite.setEmail(email);
        invite.setPhone(phone);

        invite.setFirstName(fName);
        invite.setMiddleName(mName);
        invite.setLastName(lName);
        invite.setFullName(invite.fullNameBuilder());

        inviteBO.add(invite);

        /*
        notifyBO.emailNotify(
                variableBuilder(invite, organBO.loadByOrganId(organId), action, params),
                organId, category, action.getMultilangual(), invite.getEmail()
        );
        */

        return invite;
    }

    /**
     * @param invite
     * @param organ
     * @return
     */
    private Map<String, Object> variableBuilder(final GlbInvitation invite, final GlbOrganization organ,
                                                final AbstractBaseAction action,
                                                final Map<String, Object> params) {
        final Map<String, Object> variables = new HashMap<>();

        if (organ != null) {
            variables.put("organName", organ.getName());
        }

        if (invite != null) {
            variables.put("sender", invite.getSender());
            variables.put("inviteCode", invite.getCode());
            variables.put("receiver", invite.getFullName());
            variables.put("secQryStr", securedQryStr(invite, action, params));
        }

        return variables;
    }

    /**
     * @param invite
     * @param action
     * @param params
     * @return
     */
    private String securedQryStr(final GlbInvitation invite,
                                 final AbstractBaseAction action,
                                 final Map<String, Object> params) {
        String srcVerify = "gl/contact/invite/process";
        //RedirectPageManager.INSTANCE.redirectToPath()
        String pageVerify = action.verifyRedirectPage(srcVerify) + XUriManager.INSTANCE.getExtension();

        final String[] arrURI = new String[]{
                action.getCtxPath(),
                action.getSitePrefix(),
                pageVerify
        };

        String url = PageUtil.uriBuilder(action.getHttpServletRequest(), arrURI);

        final String[] arrParam = new String[]{
                "prefix=" + action.getSitePrefix(),
                ",organId=" + (StringUtils.hasLength(invite.getOrganId()) ? invite.getOrganId() : ""),
                ",inviteCode=" + (StringUtils.hasLength(invite.getCode()) ? invite.getCode() : ""),
                ",account=" + (StringUtils.hasLength(invite.getUsername()) ? invite.getUsername() : ""),
                ",fname=" + (StringUtils.hasLength(invite.getFirstName()) ? invite.getFirstName() : ""), //invite.getFirstName(),
                ",mname=" + (StringUtils.hasLength(invite.getMiddleName()) ? invite.getMiddleName() : ""), //invite.getMiddleName(),
                ",lname=" + (StringUtils.hasLength(invite.getLastName()) ? invite.getLastName() : ""), //invite.getLastName(),
                ",fullName=" + (StringUtils.hasLength(invite.getFullName()) ? invite.getFullName() : ""), //invite.getFullName(),
                ",email=" + (StringUtils.hasLength(invite.getEmail()) ? invite.getEmail() : "") //invite.getEmail()
        };

        url = PageUtil.uriParam(url, arrParam);
        logger.debug("The activated URI with parameter {}", url);

        String strSecured = HttpRequestUtil.queryStringSecured(null, url);
        if (strSecured.contains("?")) {
            return strSecured.substring(strSecured.indexOf("?") + 1);
        }
        return StringUtils.EMPTY_STRING;
    }
}
