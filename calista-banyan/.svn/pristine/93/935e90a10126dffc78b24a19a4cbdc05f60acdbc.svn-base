/*
 * ****************************************************************
 *      Copyright (c) 2018 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */
package com.inet.calista.global.bo;

import java.util.List;

import com.inet.calista.common.bo.CalistaSSAbstractionBO;
import com.inet.calista.common.model.BaseModel;
import com.inet.calista.global.GlobalConstant;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.impl.QueryImpl;

/**
 * 
 * GlbSSNoSqlBO.
 *
 * @author Hien Nguyen
 * @version $Id: GlbSSNoSqlBO.java Jul 24, 2019 3:14:37 PM $
 *
 * @since 1.0
 */
public abstract class GlbSSNoSqlBO<T extends BaseModel> extends CalistaSSAbstractionBO<T>
{
	/**
	 * 
	 * @param contentBf
	 * @param collectionName
	 */
	protected GlbSSNoSqlBO(MagicContentBF contentBf, String collectionName)
	{
		super(contentBf, collectionName);
	}

	/**
	 * 
	 * @param query
	 * @param offset
	 * @param limit
	 * @return
	 */
	protected QueryImpl<JSONDB> pagination(final QueryImpl<JSONDB> query, int offset, int limit) 
	{
		if (offset >= 0)
			query.offset(offset);
		
		if (limit > 0)
			 query.limit(limit);
		
		return query;
	}

	/*
	 * (non-Javadoc)
	 * @see com.inet.calista.common.bo.CalistaAbstractBO#search(com.inet.xportal.xdb.query.impl.QueryImpl, int, int)
	 */
	@Override
	protected SearchDTO<T> search(final QueryImpl<JSONDB> query, int offset, int limit) 
	{
		pagination(query, offset, limit);
		
		return query(query);
	}

	/**
	 *
	 * @param uuids
	 */
	public void delete(List<String> uuids) 
	{
		final QueryImpl<JSONDB> query = new QueryImpl<>();
		query.field("uuid").in(uuids);
		this.remove(query);
	}

	/**
	 *
	 * @param uuid
	 * @return
	 */
	public boolean existById(String uuid) 
	{
		final QueryImpl<JSONDB> query = new QueryImpl<>();
		query.field(GlobalConstant.UUID).equal(uuid);
		return this.count(query) > 0;
	}
}
