/*
 * ****************************************************************
 *      Copyright (c) 2018 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.common.bo;

import com.inet.calista.common.model.SpecialDay;
import com.inet.calista.common.utils.DateUtils;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.web.context.ContentContext;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.util.LunarUtil;
import com.inet.xportal.web.util.VietCalendarUtil;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.Query;
import com.inet.xportal.xdb.query.impl.QueryImpl;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.Calendar;
import java.util.Date;

/**
 * com.inet.calista.common.bo.
 *
 * @author Phong Tran
 * @version $Id: SpecialDayBO.java Oct 25, 2018 11:09 phongtt $
 * @since 1.0
 */
@Named("SpecialDayBO")
public class SpecialDayBO extends CalNoSqlBo<SpecialDay> {
    /**
     * @param businessFacade This data must be global for all access
     */
    @Inject
    protected SpecialDayBO(@ContentContext(context = CONTENT_CONTEXT_NAME) MagicContentBF businessFacade) {
        super(businessFacade, "gl_special_calendar");
    }

    /*
     * (non-Javadoc)
     *
     * @see com.inet.xportal.nosql.web.bo.MagicContentBO#add(java.lang.Object)
     */
    @Override
    public String add(SpecialDay info) throws WebOSBOException {
        if (info.getDate() > 0)
            info.setDate(DateUtils.getDate(new Date(info.getDate())).getTime());
        return super.add(info, "date");
    }

    /*
     * (non-Javadoc)
     *
     * @see com.inet.xportal.nosql.web.bo.MagicContentBO#getClassConvetor()
     */
    @Override
    protected Class<SpecialDay> getClassConvetor() {
        return SpecialDay.class;
    }

    /**
     *
     */
    //@Override
    public void init() {
        // current year
        holidaysOfYear(0);

        // next year
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.YEAR, 1);
        holidaysOfYear(cal.get(Calendar.YEAR));
    }

    /**
     * @param date
     * @return
     * @throws WebOSBOException
     */
    public SpecialDay loadByDate(long date) throws WebOSBOException {
        final Query<JSONDB> query = new QueryImpl<JSONDB>()
                .field("date").equal(date);

        return super.load((QueryImpl<JSONDB>) query);
    }

    /**
     * @param year
     * @return
     * @throws WebOSBOException
     */
    public SearchDTO<SpecialDay> queryByYear(int year) throws WebOSBOException {
        final Query<JSONDB> query = new QueryImpl<JSONDB>()
                .field("date").greaterThanOrEq(DateUtils.beginOfYear(year).getTime())
                .field("date").lessThanOrEq(DateUtils.endOfYear(year).getTime());

        return super.query((QueryImpl<JSONDB>) query);
    }

    /**
     * @param date
     * @return
     * @throws WebOSBOException
     */
    public SearchDTO<SpecialDay> yearHoliday(long date) throws WebOSBOException {
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(date);
        cal.add(Calendar.YEAR, 1);

        logger.debug("load holiday year form {}", date, cal.getTimeInMillis());
        final Query<JSONDB> query = new QueryImpl<JSONDB>()
                .field("date").greaterThanOrEq(date);
        //.field("date").lessThanOrEq(cal.getTimeInMillis());

        return super.query((QueryImpl<JSONDB>) query);
    }


    /**
     * @param year
     */
    public void holidaysOfYear(int year) {
        // Vietnam's holidays default
        // 29-or-30/12, 1/1 and 2/1 : LUNAR NEW YEAR

        Calendar cal = Calendar.getInstance();
        if (year > 0)
            cal.set(Calendar.YEAR, year);

        // get current year
        year = cal.get(Calendar.YEAR);
        cal.set(Calendar.YEAR, year - 1);

        // get maximum day of 12-lunar's month
        int day12Lunar = LunarUtil.monthDays(year - 1, 12);

        cal.set(Calendar.MONTH, 11);
        cal.set(Calendar.DAY_OF_MONTH, day12Lunar);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 1);

        // 29-or-30/12 (last-year)
        int[] solarDate = VietCalendarUtil.convertLunar2Solar(cal.getTime());

        SpecialDay item = new SpecialDay();
        item.setDescription(day12Lunar + "/12 - Lunar New Year");
        item.setDate(DateUtils.getDate(solarDate[0], solarDate[1], solarDate[2]).getTime());
        item.setLunar(cal.getTime().getTime());
        super.add(item, "date");

        // 01/01 (new year)
        cal.set(Calendar.YEAR, year);
        cal.set(Calendar.MONTH, 0);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        solarDate = VietCalendarUtil.convertLunar2Solar(cal.getTime());

        item = new SpecialDay();
        item.setDescription("01/01 - Lunar New Year");
        item.setDate(DateUtils.getDate(solarDate[0], solarDate[1], solarDate[2]).getTime());
        item.setLunar(cal.getTime().getTime());
        super.add(item, "date");

        // 02/01 (new year)
        cal.add(Calendar.DAY_OF_YEAR, 1);
        solarDate = VietCalendarUtil.convertLunar2Solar(cal.getTime());

        item = new SpecialDay();
        item.setDescription("02/01 - Lunar New Year");
        item.setDate(DateUtils.getDate(solarDate[0], solarDate[1], solarDate[2]).getTime());
        item.setLunar(cal.getTime().getTime());
        super.add(item, "date");

        // 10/03 : Hung King day
        cal.set(Calendar.DAY_OF_MONTH, 10);
        cal.set(Calendar.MONTH, 2);

        solarDate = VietCalendarUtil.convertLunar2Solar(cal.getTime());

        item = new SpecialDay();
        item.setDescription("10/03 - Hung Kings Commemorations");
        item.setDate(DateUtils.getDate(solarDate[0], solarDate[1], solarDate[2]).getTime());
        item.setLunar(cal.getTime().getTime());
        super.add(item, "date");

        // 30/04: South freedom day
        cal.set(Calendar.DAY_OF_MONTH, 30);
        cal.set(Calendar.MONTH, 3);

        item = new SpecialDay();
        item.setDescription("30/04 - Liberation Day/Reunification Day");
        item.setDate(DateUtils.getDate(cal.getTime()).getTime());
        super.add(item, "date");

        // 1/5	: International Labor day
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.set(Calendar.MONTH, 4);

        item = new SpecialDay();
        item.setDescription("01/05 - International Workers' Day");
        item.setDate(DateUtils.getDate(cal.getTime()).getTime());
        super.add(item, "date");

        // 2/9	: Freedom day
        cal.set(Calendar.DAY_OF_MONTH, 2);
        cal.set(Calendar.MONTH, 8);

        item = new SpecialDay();
        item.setDescription("02/09 - National Day (Vietnam)");
        item.setDate(DateUtils.getDate(cal.getTime()).getTime());
        super.add(item, "date");
    }
}
