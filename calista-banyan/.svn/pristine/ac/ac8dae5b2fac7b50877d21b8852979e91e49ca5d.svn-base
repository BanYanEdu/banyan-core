/*
 * ****************************************************************
 *      Copyright (c) 2018 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.common.bo;

import com.inet.xportal.module.web.api.MngmFactoryManager;
import com.inet.xportal.module.web.model.FirmInformation;
import com.inet.xportal.nosql.web.bo.LetterTemplateAbstraction;
import com.inet.xportal.nosql.web.bo.SiteBO;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.web.context.WebContext;
import org.apache.shiro.util.CollectionUtils;

import javax.inject.Named;
import java.util.Map;

/**
 * com.inet.calista.common.bo.
 *
 * @author Phong Tran
 * @version $Id: CalNotifyBO.java Nov 09, 2018 13:50 phongtt $
 * @since 1.0
 */
@Named("CalNotifyBO")
public class CalNotifyBO extends LetterTemplateAbstraction<Object> {
    /**
     * @return
     */
    private SiteDataModel siteProfile() {
        return WebContext.INSTANCE.cache()
                .getBean(SiteBO.class)
                .loadByContext();
    }

    /**
     * @param variables
     * @param organId
     * @param category
     * @param language
     * @param emails
     */
    public void emailNotify(final Map variables,
                            String organId,
                            String category,
                            String language,
                            String emails) {
        final SiteDataModel siteData = siteProfile();
        logger.debug("SiteNotify is {}", siteData);

        if (siteData != null) {
            final FirmInformation firmInfo = MngmFactoryManager.INSTANCE
                    .service()
                    .organization(siteData, organId);


        }

        letterNotify(siteData, language, category, emails, variables);
    }


    /**
     * @param variables
     * @param organId
     * @param category
     * @param language
     * @param phones
     */
    public void smsNotify(final Map variables,
                          String organId,
                          String category,
                          String language,
                          String phones) {
        final SiteDataModel siteData = siteProfile();
        logger.debug("SiteNotify is {}", siteData);

        if (siteData != null) {
            final FirmInformation firmInfo = MngmFactoryManager.INSTANCE
                    .service()
                    .organization(siteData, organId);

            smsNotify(siteData, category, phones, variables);
        }

    }


    /**
     * @param variables
     * @param organId
     * @param category
     * @param language
     * @param application
     * @param content
     * @param users
     */
    public void pushNotify(final Map variables,
                           String organId,
                           String category,
                           String language,
                           String application,
                           String content,
                           String users) {
        final SiteDataModel siteData = siteProfile();
        logger.debug("SiteNotify is {}", siteData);

        if (siteData != null) {
            final FirmInformation firmInfo = MngmFactoryManager.INSTANCE
                    .service()
                    .organization(siteData, organId);

            pushNotify(language, category, application, content,
                    CollectionUtils.asList(users),
                    variables);
        }

    }
}
