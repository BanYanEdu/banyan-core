package com.inet.calista.crm.service.setting.dicts;

import com.google.common.base.Strings;
import com.inet.calista.crm.bo.setting.DictionaryBo;
import com.inet.calista.crm.constant.CommonConstant;
import com.inet.calista.crm.model.setting.configuration.Dictionary;
import com.inet.calista.crm.service.CRMAbstractService;
import com.inet.calista.crm.service.constant.ErrorCode;
import com.inet.calista.crm.service.constant.Roles;
import com.inet.calista.crm.service.exception.CRMBusinessException;
import com.inet.calista.crm.util.DateUtils;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.Map;

/**
 * UpdateService.
 *
 * @author thoangtd
 * @version $$Id: UpdateService 6/2/16 3:39 PM thoangtd $$
 * @since 1.0
 */
@Named("crm_setting_dict_updateservice")
@XPortalDataService(roles = {Roles.SETTING_DICT}, description = "")
@XPortalPageRequest(uri = "crm/setting/dicts/update", transaction = true, inherit = true,  result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
@Slf4j
public class UpdateService extends CRMAbstractService {
  //~ Class properties ====================================
  @Inject
  private DictionaryBo dictionaryBo;

  //~ class members =======================================
  @Override
  protected WebDataService service(final SiteDataModel site, final SubFirmProfile firmProfile,
                                   final  AbstractBaseAction action, Map<String, Object> params) throws WebOSBOException {
    try {
      Dictionary dict = action.getModel(Dictionary.class);
      dict.setOrgCode(firmProfile.getOrganiId());
      if (Strings.isNullOrEmpty(dict.getUuid())) {
        // invalid identifier
        putError(action, CommonConstant.UUID, ErrorCode.invalid);
        return FAILURE_RESULT;
      }
      if (Strings.isNullOrEmpty(dict.getKey()) ) {
        // invalid key information
        putError(action, "key", ErrorCode.must_not_empty);
        return FAILURE_RESULT;
      }
      if (Strings.isNullOrEmpty(dict.getValue())) {
        // invalid value information
        putError(action, "value", ErrorCode.must_not_empty);
        return FAILURE_RESULT;
      }
      dict.setModifiedDate(DateUtils.now().getTime());
      dictionaryBo.update(dict.getUuid(),dict);
      return new ObjectWebDataservice<>(dict);
    } catch (Exception ex) {
      CRMBusinessException iex = new CRMBusinessException("Error occurs during update dictionary", ex);

      // log error
      log.error(iex.getMessage(), iex);
      putServiceError(action);

      throw iex;
    }
  }
}
