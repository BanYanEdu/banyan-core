/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.pos.common.service.product;

import com.inet.calista.erp.common.data.ERPBinaryModel;
import com.inet.calista.erp.util.ERPUtil;
import com.inet.calista.pos.common.bo.POSProductBO;
import com.inet.calista.pos.common.model.POSItem;
import com.inet.calista.pos.common.service.common.POSAbstraction;
import com.inet.xportal.cms.web.bo.CMSAssetFileBO;
import com.inet.xportal.cms.web.bo.CMSAssetManagerBO;
import com.inet.xportal.cms.web.data.AssetType;
import com.inet.xportal.cms.web.model.CMSAssetModel;
import com.inet.xportal.cms.web.model.CMSBinaryModel;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.action.FileUploadAction;
import com.inet.xportal.web.context.WebContext;
import com.inet.xportal.web.exception.BusinessException;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.util.SecurityUtil;
import com.inet.xportal.web.util.StringUUID;
import com.inet.xportal.web.util.XParamUtils;
import net.sf.json.JSONObject;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Inject;
import java.io.File;
import java.util.Map;

/**
 * com.inet.xportal.erp.dataservice.
 *
 * @author Phong Tran
 * @version $Id: POSPriceListAbstraction.java May 07, 2018 14:08 phongtt $
 * @since 1.0
 */
public abstract class POSProductAbstraction extends POSAbstraction {

    @Inject
    protected POSProductBO productBO;


    /**
     * @param prod
     * @param params
     * @throws WebOSBOException
     */
    protected final void propertiesBuilder(final POSItem prod, final Map<String, Object> params) throws WebOSBOException {
        if (prod != null) {
            JSONObject properties = new JSONObject();
            if (prod.getProperties() != null) {
                properties = prod.getProperties();
            }

            boolean isUpdate = false;
            for (String prop : params.keySet()) {
                if (prop.startsWith("_")) {
                    isUpdate = true;
                    properties.put(prop.substring(1), params.get(prop));
                }
            }

            if (isUpdate) {
                prod.setProperties(properties);
            }
        }
    }

    /**
     *
     */
    public CMSAssetFileBO getBinaryBO() {
        return WebContext.INSTANCE.cache().getBean(CMSAssetFileBO.class);
    }

    /**
     * @param prod
     * @param imageId
     * @return
     * @throws WebOSBOException
     */
    protected final boolean removeAssetImage(final POSItem prod, String imageId) throws WebOSBOException {
        if (prod != null && !CollectionUtils.isEmpty(prod.getImages())) {
            ERPBinaryModel image = null;

            for (ERPBinaryModel img : prod.getImages()) {
                if (img.getCode().equals(imageId)) {
                    image = img;
                    break;
                }
            }

            // remove this object from list
            if (image != null && prod.getImages().remove(image)) {
                try {
                    // remove picture
                    getBinaryBO().remove(image.getUuid());

                    return true;
                } catch (WebOSBOException ex) {
                    //TODO: ignore exception
                }
            }
        }

        return false;
    }

    /**
     * @param siteData
     * @param subfirm
     * @param action
     * @param params
     * @param assetName
     * @return
     * @throws WebOSBOException
     */
    protected final CMSAssetModel addAssetImage(final SiteDataModel siteData,
                                                final SubFirmProfile subfirm,
                                                final AbstractBaseAction action,
                                                final Map<String, Object> params,
                                                String assetName) throws WebOSBOException {
        final CMSAssetModel model = new CMSAssetModel();

        try {
            model.setName(assetName);
            model.setCategory(assetName);

            model.setSite(action.getSiteID());
            model.setFirm(getPrefix(siteData, subfirm));
            model.setLanguage(action.getMultilangual());

            model.setAuthor(SecurityUtil.getPrincipal());
            model.setAlias(SecurityUtil.getAlias());

            model.setType(AssetType.IMAGE.name());

            String uuid = WebContext.INSTANCE.cache()
                    .getBean(CMSAssetManagerBO.class)
                    .add(model);

            model.setUuid(uuid);
        } catch (Throwable ex) {
            logger.warn("create asset image fail!.");
        }

        return model;
    }


    /**
     * @param prod
     * @param action
     * @throws BusinessException
     */
    protected final void imagesBuilder(final SiteDataModel siteData,
                                       final SubFirmProfile subfirm,
                                       final POSItem prod,
                                       final FileUploadAction action,
                                       final Map<String, Object> params) throws WebOSBOException {
        if (prod != null) {
            if (!CollectionUtils.isEmpty(action.getFileUpload())) {
                for (int idx = 0; idx < action.getFileUpload().size(); idx++) {
                    final File file = action.getFileUpload().get(idx);
                    logger.debug("File {} is uploading...", file);

                    if (file != null) {
                        String filetype = action.getFileType(idx);
                        String filename = action.getFileName(idx);

                        // define this with image type from user view
                        String fieldname = action.getFileUploadName().get(idx);

                        // get filename (from upload)
                        if (!StringUtils.hasLength(filename))
                            filename = file.getName();


                        final CMSAssetModel assetModel = addAssetImage(siteData, subfirm, action, params, prod.getGroup());
                        String folder = (assetModel != null && StringUtils.hasLength(assetModel.getUuid())) ? assetModel.getUuid() : prod.getUuid();

                        String binaryCode = StringUUID.uniqueToken();

                        final CMSBinaryModel cmsBinary = new CMSBinaryModel();
                        cmsBinary.setCode(binaryCode);
                        ERPUtil.fileInfoBuilder(folder, filename, fieldname, filetype, file, cmsBinary);
                        getBinaryBO().add(file, cmsBinary);


                        final ERPBinaryModel erpBinary = new ERPBinaryModel();
                        ERPUtil.fileInfoBuilder(folder, filename, fieldname, filetype, file, erpBinary);
                        erpBinary.setCode(cmsBinary.getCode());
                        erpBinary.setGridfsUUID(cmsBinary.getGridfsUUID());
                        prod.getImages().add(erpBinary);

                        String avatar = XParamUtils.getString("avatar", params, StringUtils.EMPTY_STRING);
                        if (StringUtils.hasLength(avatar) &&
                                fieldname.equals(avatar) &&
                                !avatar.equals(prod.getAvatar())) {
                            prod.setAvatar(erpBinary.getCode());
                        }


                        WebContext.INSTANCE.cache()
                                .getBean(CMSAssetManagerBO.class)
                                .updateAssetTotal(folder);
                    }
                }
            }
        }
    }


}
