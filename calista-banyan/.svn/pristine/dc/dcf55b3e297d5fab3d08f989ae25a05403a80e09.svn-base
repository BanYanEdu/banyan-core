/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.ecommerce.service.saleecm;

import com.inet.calista.ecommerce.ECMConstant;
import com.inet.calista.ecommerce.data.ECMProdSale;
import com.inet.calista.ecommerce.data.ECMSaleItem;
import com.inet.calista.ecommerce.model.ECMSaleWeb;
import com.inet.calista.erp.masterdata.bo.ERPPriceDailyBO;
import com.inet.calista.erp.masterdata.model.ERPPriceDaily;
import com.inet.calista.erp.message.ERPBookMessage;
import com.inet.xportal.sphere.model.CMSFirm;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.context.WebContext;
import com.inet.xportal.web.data.OrganizationDTO;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Named;
import java.util.Map;

/**
 * com.inet.platform.pos.service.saleretail.
 *
 * @author Phong Tran
 * @version $Id: SaleItemAddService.java Jun 07, 2018 12:07 phongtt $
 * @since 1.0
 */
@Named("commercesaleitemadd")
@XPortalDataService(roles = {ECMConstant.ROLE_SALE}, description = ECMConstant.ROLE_SALE_DESCRIPTION)
@XPortalPageRequest(uri = "commerce/sale/item/add",
        inherit = true,
        transaction = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class SaleItemAddService extends ECMSaleRetailAbstraction {

    /*
     * (non-Javadoc)
     * @see com.inet.xportal.ecommerce.cmsservice.ProductContentBase#service(com.inet.xportal.sphere.model.CMSFirm, com.inet.xportal.web.data.OrganizationDTO, com.inet.xportal.ecommerce.model.CommerceProduct, com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected WebDataService service(final CMSFirm cmsfirm,
                                     final OrganizationDTO orgItem,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String organId = orgItem.getOrganId();
        String outletId = StringUtils.EMPTY_STRING;

        String infoCode = XParamUtils.getString("infoCode", params, StringUtils.EMPTY_STRING);

        String barcode = XParamUtils.getString("barcode", params, StringUtils.EMPTY_STRING);
        final ECMSaleItem saleItem = action.getModel(ECMSaleItem.class);
        saleItem.setQty(XParamUtils.getFloat("qty", params, 1F));

        if (StringUtils.hasLength(barcode)) {
            final ECMProdSale prodData = saleEcmBO.loadProdSale(organId, StringUtils.EMPTY_STRING, barcode);
            logger.debug("found prodData {} by barcode {}", prodData, barcode);

            if (!prodData.isNull()) {
                if (!prodData.isProdNull()) {
                    saleItem.setProdId(prodData.getProduct().getUuid());
                    saleItem.setProdCode(prodData.getProduct().getCode());
                    saleItem.setProdName(prodData.getProduct().getName());
                    saleItem.setUnit(prodData.getProduct().getUnit());
                    saleItem.setPrice(prodData.getProduct().getPrice());
                    saleItem.getProdInfo().put("scanCode", prodData.getProduct().getCode());
                }

                if (!prodData.isBarcodeNull()) {
                    saleItem.setSku(prodData.getBarcode().getSku());
                    saleItem.getProdInfo().put("scanCode", barcode);
                } else {
                    saleItem.setSku(saleItem.getProdCode());
                }
            } else {
                logger.error("barcode {} is not found!", barcode);
                action.fieldError("SALEWEB", "BARCODE_NOT_FOUND");
            }
        }

        itemCheck(saleItem, action);

        ECMSaleWeb info = null;
        if (StringUtils.hasLength(infoCode)) {
            info = invoiceLoad(organId, infoCode);
        } else {
            info = invoiceCreate(cmsfirm, orgItem, action, params);
        }

        if (info == null) {
            logger.error("sale invoice isn't create");
            action.fieldError("SALEWEB", "INFO_NOT_FOUND");
        }

        int itemIndex = info.getItems().indexOf(saleItem);
        if (itemIndex >= 0) {
            saleItem.setQty(saleItem.getQty() + info.getItems().get(itemIndex).getQty());

            info.getItems().remove(saleItem);
        }

        final ERPPriceDaily priceDaily = WebContext.INSTANCE.cache()
                .getBean(ERPPriceDailyBO.class)
                .loadPriceForDay(
                        organId, ECMConstant.PRICELIST_SALE, outletId,
                        saleItem.getProdCode(), info.getCurrencyId());

        if (priceDaily != null) {
            saleItem.setPrice(priceDaily.getPrice());
        }
        saleItem.calc();

        info.getItems().add(0, saleItem);
        info.calc();

        saleEcmBO.update(info.getUuid(), info);

        //fire event message
        new ERPBookMessage()
                .withModule(saleEcmBO.getModule())
                .withOrganId(organId)
                .withOutletId(outletId)
                .withVoucherId(info.getCode())
                .execute();

        return new ObjectWebDataservice<>(info);
    }
}
