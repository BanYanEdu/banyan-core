/*****************************************************************
 Copyright 2013 by Hien Nguyen (hiennguyen@inetcloud.vn)

 Licensed under the iNet Solutions Corp.,;
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.inetcloud.vn/licenses

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *****************************************************************/
package com.inet.calista.global.bo.location;

import com.inet.calista.global.bo.GLNoSqlBo;
import com.inet.calista.global.dto.SearchCriteria;
import com.inet.calista.global.dto.search.QSearchCriteria;
import com.inet.calista.global.model.localtion.GlobalCountry;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.util.JSONUtil;
import com.inet.xportal.web.context.ContentContext;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.BeanInitiateInvoke;
import com.inet.xportal.web.util.ResourceUtil;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.Query;
import com.inet.xportal.xdb.query.impl.QueryImpl;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.shiro.util.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.List;

/**
 * GlobalCountryBo.
 *
 * @author Hien Nguyen
 * @version $Id: GlobalCountryBo.java Aug 20, 2013 3:24:24 PM nguyen_dv $
 * @since 1.0
 */
@Named("GlobalCountryBo")
public class GlobalCountryBo extends GLNoSqlBo<GlobalCountry> implements BeanInitiateInvoke {
    private static final Logger logger = LoggerFactory.getLogger(GlobalCountryBo.class);

    /**
     * @param businessFacade
     */
    @Inject
    public GlobalCountryBo(@ContentContext(context = CONTENT_CONTEXT_NAME) MagicContentBF businessFacade) {
        super(businessFacade, "gl_country");
    }

    /*
     * (non-Javadoc)
     *
     * @see com.inet.xportal.nosql.web.bo.MagicContentBO#add(java.lang.Object)
     */
    @Override
    public String add(GlobalCountry item) throws WebOSBOException {
        return super.add(item, "code");
    }

    /*
     * (non-Javadoc)
     *
     * @see com.inet.xportal.nosql.web.bo.MagicContentBO#update(java.lang.String,
     * java.lang.Object)
     */
    @Override
    public void update(String uuid, GlobalCountry item) throws WebOSBOException {
        super.update(uuid, item);
    }

    /**
     * @param criteria
     * @return
     * @throws WebOSBOException
     */
    public SearchDTO<GlobalCountry> search(SearchCriteria<QSearchCriteria> criteria) throws WebOSBOException {
        final Query<JSONDB> query = new QueryImpl<JSONDB>();

        if (StringUtils.hasLength(criteria.getCriteria().getKeyword())) {
            query.or(query.criteria("code").like(criteria.getCriteria().getKeyword()),
                    query.criteria("name").like(criteria.getCriteria().getKeyword()));
        }

        return super.search((QueryImpl<JSONDB>) query, criteria.getPageNumber(), criteria.getPageSize());
    }

    /**
     * @param codeID
     * @return
     * @throws WebOSBOException
     */
    public String getAddress(String codeID) throws WebOSBOException {
        return getAddress(super.load(codeID));
    }

    /**
     * @param country
     * @return
     * @throws WebOSBOException
     */
    public String getAddress(GlobalCountry country) throws WebOSBOException {
        if (country != null)
            return country.getName();

        return null;
    }

    /**
     * @param code
     * @return
     * @throws WebOSBOException
     */
    public GlobalCountry loadByCode(String code) throws WebOSBOException {
        final Query<JSONDB> query = new QueryImpl<JSONDB>().field("code").equal(code);

        return super.load((QueryImpl<JSONDB>) query);
    }

    /**
     * @param codes
     * @return
     * @throws WebOSBOException
     */
    public List<GlobalCountry> loadByCodes(List<String> codes) throws WebOSBOException {
        final Query<JSONDB> query = new QueryImpl<JSONDB>().field("code").in(codes);

        return query((QueryImpl<JSONDB>) query).getItems();
    }

    /**
     * @param uuid
     */
    public void removeById(String uuid) {
        final GlobalCountry country = this.load(uuid);
        if (null != country) {
            this.remove(uuid);
        }
    }


    /*
     * (non-Javadoc)
     *
     * @see com.inet.xportal.web.interfaces.BeanInitiateInvoke#init()
     */
    @Override
    public void init() {
        // index this data from database
        ensureIndex("code");
        ensureIndex("name");

        if (count() > 0)
            return;

        logger.debug("init country data from country-data.json file");

        String json = ResourceUtil.getResourceAsString("country-data.json");
        if (StringUtils.hasLength(json)) {
            JSONArray arrJson = ResourceUtil.getJsonAsArray(json);
            if (arrJson.size() > 0) {
                logger.debug("load {} items", arrJson.size());

                for (int idx = 0; idx < arrJson.size(); idx++) {
                    GlobalCountry item = JSONUtil.json2Bean(GlobalCountry.class,
                            (JSONObject) arrJson.get(idx));

                    if (StringUtils.hasLength(item.getName()) && StringUtils.hasLength(item.getCode())) {
                        logger.debug("update this country {}", item.getName());
                        try {
                            add(item);
                        } catch (WebOSBOException e) {
                            logger.error("Load from database fail.", e);
                        }
                    }
                }
            }
        }
    }

    /*
     * (non-Javadoc)
     *
     * @see com.inet.xportal.nosql.web.bo.MagicContentBO#getClassConvetor()
     */
    @Override
    protected Class<GlobalCountry> getClassConvetor() {
        return GlobalCountry.class;
    }

}
