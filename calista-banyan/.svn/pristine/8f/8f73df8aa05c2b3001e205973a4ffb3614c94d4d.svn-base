/*****************************************************************
 Copyright 2013 by Duyen Tang (tttduyen@inetcloud.vn)

 Licensed under the iNet Solutions Corp.,;
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.inetcloud.vn/licenses

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *****************************************************************/
package com.inet.calista.common.bo;

import com.inet.calista.common.CalConstant;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.nosql.web.bo.MagicContentBO;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.xdb.data.SearchResult;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.impl.QueryImpl;
import lombok.extern.slf4j.Slf4j;
import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

/**
 * IeaNoSqlBo.
 *
 * @param <T>
 * @author Duyen Tang
 * @version $Id: IdeskNoSqlBo.java 2013-07-14 10:22:42z tttduyen $
 * @since 1.0
 */
@Slf4j
public abstract class CalNoSqlBo<T> extends MagicContentBO<T> {
    public static final String CONTENT_CONTEXT_NAME = CalConstant.DB_CONTEXT;
    protected static final Logger logger = LoggerFactory.getLogger(CalNoSqlBo.class);

    /**
     * Create {@link CalNoSqlBo} instance
     *
     * @param contentBf      the given {@link MagicContentBF}
     * @param collectionName the given collection name
     */
    protected CalNoSqlBo(MagicContentBF contentBf, String collectionName) {
        super(contentBf, collectionName);
    }


    /**
     * Search with pagination
     *
     * @param query      the give Query
     * @param pageSize   the give limit item
     * @param pageNumber the give offset
     * @return
     */
    protected SearchDTO<T> search(QueryImpl<JSONDB> query, int pageSize, int pageNumber) {
        query.offset(pageSize * pageNumber);
        query.limit(pageSize);
        log.debug("Search by: {}", query.getQueryObject().toJson());
        return this.query(query);
    }
    /**
     * raw search support pipeline
     * @param query
     * @param pageSize
     * @param pageNumber
     * @return
     */
    protected SearchResult<JSONDB> rawSearch(QueryImpl<JSONDB> query, int pageSize, int pageNumber) {
        query.pipeline("$facet",
            Document.parse("{" +
                "items: [" +
                "{'$skip' : " + pageSize  * pageNumber +" }," +
                "{$limit: " + pageSize +"}]," +
                "pageInfo: [{ $group: { _id: null, total: { $sum: 1 } } }]}"));

        if(log.isDebugEnabled()){
            log.debug("Search by query");
            query.getPipelines().forEach(pipeline ->
                log.debug(pipeline.toJson())
            );

        }
        final SearchResult<JSONDB> result = this.rawQuery(query);
        int total = 0;
        if(result.getTotal() > 0) {
            final List<Document> pageInfo = result.getItems().get(0).get("pageInfo", ArrayList.class);
            if(pageInfo.size() > 0) {
                total = pageInfo.get(0).getInteger("total", 0);
            }
        }
        final List<Document> rawItems =  result.getItems().get(0).get("items", ArrayList.class);
        final List<JSONDB> items = new ArrayList<>();
        for (Document doc: rawItems) {
            items.add( new JSONDB(doc));
        }
        return new SearchResult<>( total, items);
    }

    /**
     * Makeup lookup to another collection
     * @param collection
     * @param keyLeft the give key on collection join
     * @param keyRight the given key on collection
     * @param query
     * @param match
     * @param projection
     * @param mergeRoot
     */
    protected void lookup(String collection, String keyLeft, String keyRight, QueryImpl<JSONDB> query, QueryImpl<JSONDB> match, Document projection, boolean mergeRoot){
        final Document lookup = new Document();
        final QueryImpl<JSONDB> pipeline = new QueryImpl<>();
        lookup.append("from", collection);
        lookup.append("let", Document.parse(String.format("{'%s': '$%s'}", keyLeft, keyLeft)));
        final Document queryMatch = Document.parse(String.format("{'$expr': {$eq : ['$%s', '$$%s']}}", keyRight, keyLeft));
        queryMatch.putAll(match.getQueryObject());
        pipeline.pipeline("$match",  queryMatch);
        if(null != projection && !projection.isEmpty()) {
            pipeline.pipeline("$project", projection);
        } else {
            pipeline.pipeline("$project", Document.parse("{_id:0,uuid:0}"));
        }

        lookup.append("pipeline", pipeline.getPipelines());
        String name = "info";
        lookup.append("as", name);

        query.pipeline("$lookup", lookup);
        query.pipeline("$match", Document.parse(String.format("{'%s': {'$ne': []}}", name)));
        if (mergeRoot){
            query.pipeline("$replaceRoot", Document.parse(String.format("{ newRoot: { $mergeObjects: [ { $arrayElemAt: [ '$%s', 0 ] }, '$$ROOT' ] } }", name)));
            query.pipeline("$project", Document.parse(String.format("{%s: 0}", name)));
        }
    }
}
