/*
 * ****************************************************************
 *      Copyright (c) 2018 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.common.service;

import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;

import org.apache.shiro.util.StringUtils;

import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.report.bo.ReportBuilderBO;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.data.IdentityDTO;
import com.inet.xportal.web.data.ViolationDTO;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.SecurityUtil;
import com.inet.xportal.web.util.XParamUtils;

/**
 * 
 * CalistaAbstraction.
 *
 * @author Hien Nguyen
 * @version $Id: CalistaAbstraction.java May 21, 2019 8:58:59 AM $
 *
 * @since 1.0
 */
public abstract class CalistaReportAbstraction extends CalistaAbstraction 
{
	@Inject
	protected ReportBuilderBO reportBO;
	
	/**
	 * 
	 * @param reportSiteID
	 * @param templateID
	 * @param params
	 * @return
	 * @throws WebOSBOException
	 */
	protected String reportBuilder(String reportSiteID, String templateID, final AbstractBaseAction action, final Map<String, Object> params) throws WebOSBOException
	{
		return reportBO.reportBuilder(reportSiteID,templateID,action.getUploadSaveDir(),params);
	}
	
	/**
	 * 
	 * @param firm
	 * @param action
	 * @param params
	 * @return
	 */
	protected final String siteEnabled(final SubFirmProfile firm,
			final AbstractBaseAction action, 
			final Map<String, Object> params)
	{
		if (firm == null || !StringUtils.hasLength(firm.getOrganiId()))
			return action.getSiteID();
			
		return firm.getOrganiId();
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.inet.xportal.web.interfaces.DataServiceMarker#service(com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
	 */
	@Override
	protected final WebDataService service(final SiteDataModel site, 
			final SubFirmProfile firmProfile,
			final AbstractBaseAction action,
			final Map<String, Object> params) throws WebOSBOException  
	{
		String templateID = XParamUtils.getString("templateID", params);
		if (!StringUtils.hasLength(templateID))
		{
			logger.error("The templateID is required.");
			action.getViolation().add(new ViolationDTO("TEMPLATE", "TEMPLATE", 1, "TEMPLATE_MISSED"));
			throw new WebOSBOException("Bad request!");
		}
		
		String usercode = SecurityUtil.getPrincipal();
		final Map<String,Object> values = new HashMap<>(params);
		values.put("_userCode", usercode);
		values.put("_userAlias", SecurityUtil.getAlias());
		values.put("_siteID", action.getSiteID());
		values.put("_sitePrefix", action.getSitePrefix());
		
		String reportSiteID = siteEnabled(firmProfile,action, params);
		
		return new ObjectWebDataservice<>(new IdentityDTO(reportBuilder(reportSiteID,templateID,action,values)));
	}
}
