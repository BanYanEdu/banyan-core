/*****************************************************************
 Copyright 2013 by Duyen Tang (tttduyen@inetcloud.vn)

 Licensed under the iNet Solutions Corp.,;
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.inetcloud.vn/licenses

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 *****************************************************************/
package com.inet.calista.common.bo;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.inet.calista.common.CalistaConstant;
import com.inet.calista.common.model.BaseModel;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.thesis.solr.SuggestionAbstraction;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.impl.QueryImpl;

/**
 * 
 * CalistaSSAbstractionBO.
 *
 * @author Hien Nguyen
 * @version $Id: CalistaSSAbstractionBO.java Jul 24, 2019 3:11:48 PM $
 *
 * @since 1.0
 */
public abstract class CalistaSSAbstractionBO<T extends BaseModel> extends SuggestionAbstraction<T> {
    protected static final Logger logger = LoggerFactory.getLogger(CalistaSSAbstractionBO.class);
    protected static final String CONTENT_CONTEXT_NAME = CalistaConstant.DB_CONTEXT;
    
    /**
     * Create {@link CalistaSSAbstractionBO} instance
     *
     * @param contentBf      the given {@link MagicContentBF}
     * @param collectionName the given collection name
     */
    protected CalistaSSAbstractionBO(MagicContentBF contentBf, String collectionName) 
    {
        super(contentBf, collectionName);
    }
    
    /**
     * Search with pagination
     *
     * @param query      the give Query
     * @param pageSize   the give limit item
     * @param pageNumber the give offset
     * @return
     */
    protected SearchDTO<T> search(QueryImpl<JSONDB> query, int pageSize, int pageNumber) {
        query.offset(pageSize * pageNumber);
        query.limit(pageSize);
        logger.debug("Search by: {}", query.getQueryObject().toJson());
        return this.query(query);
    }
}
