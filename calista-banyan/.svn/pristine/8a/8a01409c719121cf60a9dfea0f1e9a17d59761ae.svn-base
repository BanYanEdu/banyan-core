/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.ecommerce.service.saleecm;

import com.inet.calista.ecommerce.ECMConstant;
import com.inet.calista.ecommerce.data.ECMProdSale;
import com.inet.calista.ecommerce.data.ECMSaleItem;
import com.inet.xportal.sphere.model.CMSFirm;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.data.OrganizationDTO;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Named;
import java.util.Map;

/**
 * com.inet.platform.pos.service.saleretail.
 *
 * @author Phong Tran
 * @version $Id: SaleItemCalcService.java Aug 27, 2018 07:57 phongtt $
 * @since 1.0
 */
@Named("commercesaleitemcalc")
@XPortalDataService(roles = {ECMConstant.ROLE_SALE}, description = ECMConstant.ROLE_SALE_DESCRIPTION)
@XPortalPageRequest(uri = "commerce/sale/item/calc",
        inherit = true,
        transaction = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class SaleItemCalcService extends ECMSaleRetailAbstraction {

    /*
     * (non-Javadoc)
     * @see com.inet.xportal.ecommerce.cmsservice.ProductContentBase#service(com.inet.xportal.sphere.model.CMSFirm, com.inet.xportal.web.data.OrganizationDTO, com.inet.xportal.ecommerce.model.CommerceProduct, com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected WebDataService service(final CMSFirm cmsfirm,
                                     final OrganizationDTO orgItem,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String organId = orgItem.getOrganId();
        String outletId = StringUtils.EMPTY_STRING;
        String infoCode = XParamUtils.getString("infoCode", params, StringUtils.EMPTY_STRING);

        String barcode = XParamUtils.getString("barcode", params, StringUtils.EMPTY_STRING);
        final ECMSaleItem invoiceItem = action.getModel(ECMSaleItem.class);
        invoiceItem.setQty(XParamUtils.getFloat("qty", params, 1F));

        if (StringUtils.hasLength(barcode)) {
            final ECMProdSale prodData = saleEcmBO.loadProdSale(organId, outletId, barcode);
            logger.debug("found prodData {} by barcode {}", prodData, barcode);

            if (!prodData.isNull()) {
                if (!prodData.isProdNull()) {
                    invoiceItem.setProdCode(prodData.getProduct().getCode());
                    invoiceItem.setProdName(prodData.getProduct().getName());
                    invoiceItem.setUnit(prodData.getProduct().getUnit());
                    invoiceItem.setPrice(XParamUtils.getFloat("price", params, prodData.getProduct().getPrice()));
                    invoiceItem.getProdInfo().put("scanCode", prodData.getProduct().getCode());
                }

                if (!prodData.isBarcodeNull()) {
                    invoiceItem.setSku(prodData.getBarcode().getSku());
                    invoiceItem.getProdInfo().put("scanCode", barcode);
                } else {
                    invoiceItem.setSku(invoiceItem.getProdCode());
                }
            } else {
                logger.error("barcode {} is not found!", barcode);
                action.fieldError("SALEWEB", "BARCODE_NOT_FOUND");
            }
        }

        itemCheck(invoiceItem, action);
        invoiceItem.calc();

        return new ObjectWebDataservice<>(invoiceItem);
    }
}
