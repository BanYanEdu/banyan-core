/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.global.bo;

import com.inet.calista.global.model.GlbEmailFirm;
import com.inet.xportal.module.web.util.FirmServiceUtil;
import com.inet.xportal.nosql.web.data.FirmProfileDTO;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.web.bo.JavaMailBO;
import com.inet.xportal.web.context.WebContext;
import com.inet.xportal.web.util.TemplateUtil;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Named;
import java.io.File;
import java.util.List;
import java.util.Map;

/**
 * com.inet.calista.global.bo.
 *
 * @author Phong Tran
 * @version : GlbNotifyBO.java Jun 05, 2019 09:04 phongtt $
 * @since 1.0
 */
@Named("GlbNotifyBO")
public class GlbNotifyBO {
    //extends LetterTemplateAbstraction<Object> {
    protected static final Logger logger = LoggerFactory.getLogger(GlbNotifyBO.class);

    @Inject
    private GlbEmailFirmBO emailFirmBO;

    @Inject
    private JavaMailBO javaMailBO;

    /**
     * @param variables
     * @param category
     * @param language
     * @param application
     * @param sender
     * @param receivers
     */
    public void notifyPush(final SiteDataModel siteData,
                           final FirmProfileDTO profileDTO,
                           final Map variables,
                           String category,
                           String language,
                           String application,
                           String sender,
                           String receivers) {
        if (siteData == null || profileDTO != null || variables == null ||
                !StringUtils.hasLength(category) || !StringUtils.hasLength(language)) {
            logger.warn("BaseInformation for notify push is missing !....");
            return;
        }

        if (StringUtils.hasLength(application) &&
                StringUtils.hasLength(sender) &&
                StringUtils.hasLength(receivers)) {
            final List<String> lstReceiver = CollectionUtils.asList(receivers.split(","));
            //pushNotify(language, category, application, sender, lstReceiver, variables);
        }
    }

    /**
     * @param siteData
     * @param variables
     * @param category
     * @param language
     * @param emails
     */
    public void notifyEmail(final SiteDataModel siteData,
                            final FirmProfileDTO profileDTO,
                            final Map variables,
                            String category,
                            String language,
                            String emails) {
        notifyEmail(siteData, profileDTO, variables, null, category, language, emails);
    }

    /**
     * @param siteData
     * @param variables
     * @param category
     * @param language
     * @param emails
     */
    public void notifyEmail(final SiteDataModel siteData,
                            final FirmProfileDTO profileDTO,
                            final Map variables,
                            final Map<String, File> files,
                            String category,
                            String language,
                            String emails) {
        if (siteData == null || profileDTO != null || variables == null ||
                !StringUtils.hasLength(category) ||
                !StringUtils.hasLength(language) ||
                !StringUtils.hasLength(emails)) {

            logger.warn("BaseInformation for notify email is missing !....");
            return;
        }


        String application = WebContext.INSTANCE.cache().getApplication();
        List<String> alias = CollectionUtils.asList(emails.split(","));
        sendMail(siteData, profileDTO, category, language, application, alias, variables, files);
    }

    /**
     * @param siteData
     * @param profileDTO
     * @param category
     * @param language
     * @param application
     * @param alias
     * @param variables
     */
    private void sendMail(final SiteDataModel siteData,
                          final FirmProfileDTO profileDTO,
                          String category, String language, String application,
                          List<String> alias, Map variables, Map<String, File> files) {

        String organId = FirmServiceUtil.getOrganId(siteData, profileDTO);
        final GlbEmailFirm emailFirm = emailFirmBO.loadTemplate(application, organId, category, language);

        logger.debug("emailFirm {} with organ {} is loaded !...", emailFirm, organId);
        if (emailFirm != null && StringUtils.hasLength(emailFirm.getEmailContent())) {
            try {
                String sender = StringUtils.EMPTY_STRING;
                if (profileDTO != null) {
                    sender = profileDTO.getEmail();
                }
                javaMailBO.setSender(sender);

                javaMailBO.setSubject(emailFirm.getEmailSubject());
                javaMailBO.setContent(TemplateUtil.velocityVariables(emailFirm.getEmailContent(), variables));

                String[] receivers = alias.toArray(new String[]{});

                if (files != null && !CollectionUtils.isEmpty(files)) {
                    javaMailBO.send(files, receivers);
                } else {
                    javaMailBO.send(receivers);
                }
            } catch (Exception ex) {
                logger.error("Email sending error ", ex);
            }

            return;
        }

        logger.error("Email template of language: {}, code : {} is null or empty content.", language, category);
    }

    /**
     * @param siteData
     * @param profileDTO
     * @param variables
     * @param category
     * @param language
     * @param phones
     */
    public void notifySms(final SiteDataModel siteData,
                          final FirmProfileDTO profileDTO,
                          final Map variables,
                          String category,
                          String language,
                          String phones) {
        if (siteData == null || profileDTO != null || variables == null ||
                !StringUtils.hasLength(category) || !StringUtils.hasLength(language)) {
            logger.warn("Notify information base is missing !....");
            return;
        }

        if (StringUtils.hasLength(phones)) {
            final List<String> lstPhone = CollectionUtils.asList(phones.split(","));
            //smsNotify(siteData, profileDTO, category, lstPhone, variables);
        }
    }
}
