package com.inet.calista.global.service.contact.profile;

import com.google.common.base.Strings;
import com.inet.calista.common.utils.ErrorCode;
import com.inet.calista.global.bo.contact.ContactInfoBo;
import com.inet.calista.global.constant.CommonConstant;
import com.inet.calista.global.exception.GlServiceException;
import com.inet.calista.global.model.contact.ContactInfo;
import com.inet.calista.global.service.GlAbstractService;
import com.inet.xportal.common.profile.BaseAccountDTO;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.deployer.ConfigureLoader;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.SecurityUtil;
import com.inet.xportal.web.util.XParamUtils;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.util.StringUtils;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.Map;

/**
 * LoadProfileService.
 *
 * @author thoangtran
 * @version LoadProfileService 2018 07-25 11:25
 */
@Named("glcontactprofileload")
@XPortalDataService(roles = {WebConstant.ROLE_USER}, description = "User role")
@XPortalPageRequest(uri = "gl/contact/profile/load",
        transaction = true,
        inherit = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
@Slf4j
public class LoadProfileService extends GlAbstractService {
    @Inject
    private ContactInfoBo contactInfoBo;

    @Override
    protected WebDataService service(final SiteDataModel site, final SubFirmProfile profile,
                                     final AbstractBaseAction action, final Map<String, Object> params) throws WebOSBOException {
        try {
            String username = XParamUtils.getString("username", params, SecurityUtil.getPrincipal());
            if (Strings.isNullOrEmpty(username)) {
                putError(action, CommonConstant.USERNAME, ErrorCode.USER_NOT_LOGIN);
                return FAILURE_RESULT;
            }
            ContactInfo contactInfo = contactInfoBo.loadByUserCode(username);
            logger.debug("found contact {} by user {}", contactInfo, username);

            if (null == contactInfo) {
                contactInfo = new ContactInfo();

                try {
                    final BaseAccountDTO baseAccount = ConfigureLoader.INSTANCE.ini()
                            .getHdlUserProfile()
                            .loadAccountProfile(username);

                    if (baseAccount != null) {
                        contactInfo.setUserCode(username);

                        String fName = StringUtils.hasLength(baseAccount.getFname()) ? baseAccount.getFname() : "";
                        String mName = StringUtils.hasLength(baseAccount.getMname()) ? baseAccount.getMname() : "";
                        String lName = StringUtils.hasLength(baseAccount.getLname()) ? baseAccount.getLname() : "";
                        contactInfo.setFirstName(fName);
                        contactInfo.setMiddleName(mName);
                        contactInfo.setLastName(lName);

                        contactInfo.setUuid(contactInfoBo.add(contactInfo));
                    }
                } catch (Throwable ex) {
                    logger.error("Sync ldap user fail !...");
                }
            }
            return new ObjectWebDataservice<>(contactInfo);

        } catch (Exception ex) {
            GlServiceException iex = new GlServiceException("Error occurs during loading contact by identify", ex);

            // log error
            log.error(iex.getMessage(), iex);
            putServiceError(action);

            throw iex;
        }
    }
}
