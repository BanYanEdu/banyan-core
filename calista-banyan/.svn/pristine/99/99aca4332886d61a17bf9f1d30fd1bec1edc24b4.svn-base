/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.pos.retail.service.purchase;

import com.inet.calista.pos.retail.POSRetailConstant;
import com.inet.calista.pos.retail.data.POSProdPurchase;
import com.inet.calista.pos.retail.data.POSPurchaseItem;
import com.inet.calista.pos.retail.model.POSPurchase;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.JSONUtils;
import com.inet.xportal.web.util.XParamUtils;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Named;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * com.inet.platform.pos.service.saleretail.
 *
 * @author Phong Tran
 * @version $Id: SaleItemAddService.java Jun 07, 2018 12:07 phongtt $
 * @since 1.0
 */
@Named("pospurchaseitemadd")
@XPortalDataService(roles = {POSRetailConstant.ROLE_PURCHASE}, description = POSRetailConstant.ROLE_PURCHASE_DESCRIPTION)
@XPortalPageRequest(uri = "pos/purchase/item/add",
        inherit = true,
        transaction = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class PurchaseItemAddService extends POSPurchaseAbstraction {

    /*
     * (non-Javadoc)
     * @see com.inet.xportal.ecommerce.cmsservice.ProductContentBase#service(com.inet.xportal.sphere.model.CMSFirm, com.inet.xportal.web.data.OrganizationDTO, com.inet.xportal.ecommerce.model.CommerceProduct, com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected WebDataService service(final SiteDataModel siteData,
                                     final SubFirmProfile subFirm,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String organId = getOrganId(siteData, subFirm);
        String outletId = getOutletId(siteData, subFirm, action);
        String infoCode = XParamUtils.getString("infoCode", params, StringUtils.EMPTY_STRING);

        final List<POSPurchaseItem> invoiceItems = new ArrayList<>();
        String itemData = XParamUtils.getString("itemData", params, StringUtils.EMPTY_STRING);
        if (StringUtils.hasLength(itemData)) {
            try {
                final JSONObject json = JSONObject.fromObject("{items:" + itemData + "}");
                final Object items = json.get("items");

                if (items instanceof JSONArray) {
                    int size = ((JSONArray) items).size();
                    for (int index = 0; index < size; index++) {
                        try {
                            JSONObject itemIndex = ((JSONArray) items).getJSONObject(index);
                            String barcode = StringUtils.EMPTY_STRING;
                            if (itemIndex.has("barcode") && StringUtils.hasLength(itemIndex.getString("barcode"))) {
                                barcode = itemIndex.getString("barcode");
                            }

                            POSPurchaseItem invoiceItem = JSONUtils.magicObject(((JSONArray) items).getJSONObject(index), POSPurchaseItem.class);
                            if (!StringUtils.hasLength(barcode)) {
                                barcode = invoiceItem.getProdCode();
                            }

                            if (StringUtils.hasLength(barcode)) {
                                final POSProdPurchase prodData = purchaseBO.loadProdPurchase(organId, outletId, barcode);
                                logger.debug("found prodData {} by barcode {}", prodData, barcode);

                                if (!prodData.isNull()) {
                                    if (!prodData.isProdNull()) {
                                        invoiceItem.setProdCode(prodData.getProduct().getCode());
                                        invoiceItem.setProdName(prodData.getProduct().getName());
                                        invoiceItem.setUnit(prodData.getProduct().getUnit());

                                        if (!itemIndex.has("qty")) {
                                            invoiceItem.setQty(1);
                                        }
                                        if (!itemIndex.has("price")) {
                                            invoiceItem.setPrice(prodData.getProduct().getPrice());
                                        }
                                        invoiceItem.getProdInfo().put("scanCode", prodData.getProduct().getCode());
                                    }

                                    if (!prodData.isBarcodeNull()) {
                                        invoiceItem.setSku(prodData.getBarcode().getSku());
                                        invoiceItem.getProdInfo().put("scanCode", barcode);
                                    } else {
                                        invoiceItem.setSku(invoiceItem.getProdCode());
                                    }
                                } else {
                                    logger.error("barcode {} is not found!", barcode);
                                    invoiceItem = null;
                                }
                            }

                            if (invoiceItem != null) {
                                itemCheck(invoiceItem, action);
                                invoiceItem.calc();
                                invoiceItems.add(invoiceItem);
                            }
                        } catch (Throwable ex) {
                            logger.error("magic object itemData index {} fail!", index, ex);
                        }
                    }
                }
            } catch (Throwable ex) {
                logger.error("itemData isn't json data: {}", itemData);
            }
        } else {
            String barcode = XParamUtils.getString("barcode", params, StringUtils.EMPTY_STRING);
            final POSPurchaseItem invoiceItem = action.getModel(POSPurchaseItem.class);
            invoiceItem.setQty(XParamUtils.getFloat("qty", params, 1F));

            if (StringUtils.hasLength(barcode)) {
                final POSProdPurchase prodData = purchaseBO.loadProdPurchase(organId, outletId, barcode);
                logger.debug("found prodData {} by barcode {}", prodData, barcode);

                if (!prodData.isNull()) {
                    if (!prodData.isProdNull()) {
                        invoiceItem.setProdCode(prodData.getProduct().getCode());
                        invoiceItem.setProdName(prodData.getProduct().getName());
                        invoiceItem.setUnit(prodData.getProduct().getUnit());
                        invoiceItem.setPrice(XParamUtils.getFloat("price", params, prodData.getProduct().getPrice()));
                        invoiceItem.getProdInfo().put("scanCode", prodData.getProduct().getCode());
                    }

                    if (!prodData.isBarcodeNull()) {
                        invoiceItem.setSku(prodData.getBarcode().getSku());
                        invoiceItem.getProdInfo().put("scanCode", barcode);
                    } else {
                        invoiceItem.setSku(invoiceItem.getProdCode());
                    }
                } else {
                    logger.error("barcode {} is not found!", barcode);
                    action.fieldError("PURCHASE", "BARCODE_NOT_FOUND");
                }
            }

            itemCheck(invoiceItem, action);
            invoiceItem.calc();
            invoiceItems.add(invoiceItem);
        }


        POSPurchase info;
        if (StringUtils.hasLength(infoCode)) {
            info = invoiceLoad(organId, infoCode);
        } else {
            info = invoiceCreate(siteData, subFirm, action, params);
        }

        if (info == null) {
            logger.error("invoice isn't create");
            action.fieldError("PURCHASE", "INFO_NOT_FOUND");
        }


        if (!CollectionUtils.isEmpty(invoiceItems)) {
            info.getItems().addAll(invoiceItems);
            info.calc();
        }

        purchaseBO.update(info.getUuid(), info);

        for (POSPurchaseItem item : invoiceItems) {
            analysis(info, item, action);
        }

        fireEvent(organId, outletId, info.getCode());

        return new ObjectWebDataservice<>(info);
    }
}
