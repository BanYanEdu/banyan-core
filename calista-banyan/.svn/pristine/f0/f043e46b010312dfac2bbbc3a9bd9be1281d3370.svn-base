/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */
package com.inet.calista.ecommerce.service.common;

import com.inet.calista.ecommerce.model.ECMItem;
import com.inet.calista.erp.common.data.ERPBinaryModel;
import com.inet.xportal.cms.web.model.CMSBinaryModel;
import com.inet.xportal.sphere.model.CMSFirm;
import com.inet.xportal.util.FileUtil;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.action.FileDownloadAction;
import com.inet.xportal.web.data.FileServerSignal;
import com.inet.xportal.web.data.OrganizationDTO;
import com.inet.xportal.web.data.ViolationDTO;
import com.inet.xportal.web.deployer.ConfigureLoader;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import com.inet.xportal.xdb.util.CommonUtil;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;

import java.io.File;
import java.io.FileInputStream;
import java.util.Map;

/**
 * BinaryViewAbstraction.
 *
 * @author Hien Nguyen
 * @version $Id: BinaryViewAbstraction.java Dec 12, 2017 3:56:20 PM $
 * @since 1.0
 */
public abstract class BinaryViewAbstraction extends ProductContentBase {
    /*
     * (non-Javadoc)
     * @see com.inet.xportal.cms.web.marketplace.dataservice.ApplicationSummaryBase#service(com.inet.xportal.cms.web.model.ApplicationSummary, com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected final WebDataService service(final CMSFirm cmsfirm,
                                           final OrganizationDTO orgItem,
                                           final ECMItem summary,
                                           final AbstractBaseAction action,
                                           final Map<String, Object> params) throws WebOSBOException {
        String imageID = XParamUtils.getString("image", params);
        logger.debug("image {} is looking ........", imageID);

        if (!StringUtils.hasLength(imageID)) {
            logger.error("Application image ID is required.");
            action.getViolation().add(new ViolationDTO("IMAGE_ID", "IMAGE_ID", 1, "IMAGE_ID_MISSED"));
            throw new WebOSBOException("Bad request!");
        }

        ERPBinaryModel imageInfo = new ERPBinaryModel();
        imageInfo.setCode(imageID);
        logger.debug("image {} found.", imageID);

        if (CollectionUtils.isEmpty(summary.getImages()) ||
                !summary.getImages().contains(imageInfo)) {
            logger.error("Application image ID is not found.");
            action.getViolation().add(new ViolationDTO("IMAGE_ID", "IMAGE_ID", 1, "IMAGE_NOT_FOUND"));
            throw new WebOSBOException("Bad request!");
        }

        int idx = summary.getImages().indexOf(imageInfo);
        imageInfo = summary.getImages().get(idx);

        logger.debug("image GridfsUUID {} && fileserver {}", imageInfo.getGridfsUUID(), ConfigureLoader.INSTANCE.fileserver());
        // file server of this link
        if (ConfigureLoader.INSTANCE.fileserver() &&
                !CommonUtil.isObjectId(imageInfo.getGridfsUUID())) {
            return new ObjectWebDataservice<>(new FileServerSignal(FileUtil.pathBuilder(ConfigureLoader.INSTANCE.fileserverPath(), imageInfo.getGridfsUUID())));
        }


        logger.debug("image at {}", idx);
        final File file = new File(action.getUploadSaveDir(), summary.getCmsTab().getContentID() + ".tmp");
        try {

            final CMSBinaryModel fileInfo = null;
            //TODO: getBinaryBO().getLast(imageInfo, file);
            logger.debug("found CMSBinaryModel {}", fileInfo);
            if (fileInfo == null || file.length() <= 0) {
                logger.error("Application image ID is not found.");
                action.getViolation().add(new ViolationDTO("IMAGE_ID", "IMAGE_ID", 1, "IMAGE_NOT_FOUND"));
                throw new WebOSBOException("Bad request!");
            }

            final FileDownloadAction dlAction = (FileDownloadAction) action;

            dlAction.setInputStream(new FileInputStream(file));
            dlAction.setContentType(fileInfo.getMimetype());
            dlAction.setContentDispostion("inline");
        } catch (Throwable ex) {
            logger.error("Application image download fail. {}", ex);
            action.getViolation().add(new ViolationDTO("IMAGE_ID", "IMAGE_ID", 1, "IMAGE_NOT_FOUND"));
            throw new WebOSBOException("Bad request!");
        } finally {
            if (file.exists())
                file.delete();
        }

        return new ObjectWebDataservice<>(summary);
    }
}
