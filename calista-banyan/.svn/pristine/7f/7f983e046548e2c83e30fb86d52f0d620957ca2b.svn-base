/*****************************************************************
   Copyright 2017 by Duyen Tang (tttduyen@inetcloud.vn)

   Licensed under the iNet Solutions Corp.,;
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.inetcloud.vn/licenses

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 *****************************************************************/
package com.inet.calista.collatask.service.attachment;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.inject.Named;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Strings;
import com.inet.calista.collatask.bo.AttachmentBo;
import com.inet.calista.collatask.constants.CollaTaskJsonConstants;
import com.inet.calista.collatask.constants.Roles;
import com.inet.calista.collatask.model.Attachment;
import com.inet.calista.collatask.service.CollabarationTaskService;
import com.inet.calista.collatask.util.ErrorCode;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ListWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * AddAttachmentService.
 *
 * @author Duyen Tang
 * @version $Id: AddAttachmentService.java Dec 29, 2017 10:02:55 AM tttduyen $
 *
 * @since 1.0
 */
@Named("colla_att_saveservice")
@XPortalDataService(roles = {Roles.BIZ_COMMON}, description = "")
@XPortalPageRequest(uri = "colla/atts/save",
        inherit = true, result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class SaveService extends CollabarationTaskService {
  private static final Logger LOG = LoggerFactory.getLogger(SaveService.class);
  @Inject
  private AttachmentBo attachmentBo;

  @Override
  protected WebDataService service(SiteDataModel site, SubFirmProfile subFirm, AbstractBaseAction action,
      Map<String, Object> params) throws WebOSBOException {
    // get attachment information
    String attachmentsStr = XParamUtils.getString(CollaTaskJsonConstants.ATTACHMENTS, params);
    if (Strings.isNullOrEmpty(attachmentsStr)) {
      putError(action, CollaTaskJsonConstants.ATTACHMENTS, ErrorCode.must_not_empty);
      return FAILURE_RESULT;
    }
    
    // convert given string to JSONArray
    JSONArray attachmentArray = JSONArray.fromObject(attachmentsStr);
    if (attachmentArray.isEmpty()) {
      putError(action, CollaTaskJsonConstants.ATTACHMENTS, ErrorCode.invalid);
      return FAILURE_RESULT;
    }
    
    String refUuid = XParamUtils.getString(CollaTaskJsonConstants.REF_UUID, params);
    String refType = XParamUtils.getString(CollaTaskJsonConstants.REF_TYPE, params);
    if (Strings.isNullOrEmpty(refUuid) || Strings.isNullOrEmpty(refType)) {
      putError(action, CollaTaskJsonConstants.REF_UUID + "_and_" + CollaTaskJsonConstants.REF_TYPE, ErrorCode.must_not_empty);
      return FAILURE_RESULT;
    }
    
    List<Attachment> attachments = new ArrayList<>();
    List<String> contentUuids = new ArrayList<>();
    Attachment attachment = null;
    LOG.debug("Begin check attachment information");
    for (int index = 0; index < attachmentArray.size(); index++) {
      attachment = (Attachment) JSONObject.toBean(attachmentArray.getJSONObject(index), Attachment.class);
      if (Strings.isNullOrEmpty(attachment.getContentUuid())) {
        putError(action, CollaTaskJsonConstants.ATTACHMENTS + "_contentUuid", ErrorCode.must_not_empty);
        return FAILURE_RESULT;
      }
      
      contentUuids.add(attachment.getContentUuid());
      attachments.add(attachment);
    }

    LOG.debug("Begin save attachments information");
    attachments.forEach(att -> {
      att.setRefUuid(refUuid);
      att.setRefType(refType);
      
      // save attachment
      att.setUuid(attachmentBo.add(att));
    });
    
    return new ListWebDataservice<>(attachments);
  }
}
