/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.global.bo;

import com.inet.xportal.nosql.web.bo.LetterTemplateAbstraction;
import com.inet.xportal.nosql.web.data.FirmProfileDTO;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Named;
import java.util.List;
import java.util.Map;

/**
 * com.inet.calista.global.bo.
 *
 * @author Phong Tran
 * @version : GlbNotifyBO.java Jun 05, 2019 09:04 phongtt $
 * @since 1.0
 */
@Named("GlbNotifyBO")
public class GlbNotifyBO extends LetterTemplateAbstraction<Object> {

    /**
     * @param variables
     * @param category
     * @param language
     * @param application
     * @param sender
     * @param receivers
     */
    public void notifyPush(final SiteDataModel siteData,
                           final FirmProfileDTO profileDTO,
                           final Map variables,
                           String category,
                           String language,
                           String application,
                           String sender,
                           String receivers) {
        if (siteData == null || profileDTO != null || variables == null ||
                !StringUtils.hasLength(category) || !StringUtils.hasLength(language)) {
            logger.warn("BaseInformation for notify push is missing !....");
            return;
        }

        if (StringUtils.hasLength(application) &&
                StringUtils.hasLength(sender) &&
                StringUtils.hasLength(receivers)) {
            final List<String> lstReceiver = CollectionUtils.asList(receivers.split(","));
            pushNotify(language, category, application, sender, lstReceiver, variables);
        }

    }

    /**
     * @param siteData
     * @param variables
     * @param category
     * @param language
     * @param emails
     */
    public void notifyEmail(final SiteDataModel siteData,
                            final FirmProfileDTO profileDTO,
                            final Map variables,
                            String category,
                            String language,
                            String emails) {
        if (siteData == null || profileDTO != null || variables == null ||
                !StringUtils.hasLength(category) || !StringUtils.hasLength(language)) {
            logger.warn("BaseInformation for notify push is missing !....");
            return;
        }


        if (StringUtils.hasLength(emails)) {
            for (String email : emails.split(",")) {
                if (email.contains("@")) {
                    letterNotify(siteData, language, category, email, variables);
                }
            }
        }
    }

    /**
     * @param siteData
     * @param profileDTO
     * @param variables
     * @param category
     * @param language
     * @param phones
     */
    public void notifySms(final SiteDataModel siteData,
                          final FirmProfileDTO profileDTO,
                          final Map variables,
                          String category,
                          String language,
                          String phones) {
        if (siteData == null || profileDTO != null || variables == null ||
                !StringUtils.hasLength(category) || !StringUtils.hasLength(language)) {
            logger.warn("Notify information base is missing !....");
            return;
        }

        if (StringUtils.hasLength(phones)) {
            final List<String> lstPhone = CollectionUtils.asList(phones.split(","));
            smsNotify(siteData, profileDTO, category, lstPhone, variables);
        }
    }
}
