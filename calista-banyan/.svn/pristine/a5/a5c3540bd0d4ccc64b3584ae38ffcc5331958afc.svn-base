/*
 * ****************************************************************
 *      Copyright (c) 2018 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.erp.inventory.bo;

import com.inet.calista.erp.common.bo.ERPBaseBO;
import com.inet.calista.erp.inventory.model.ERPStockMovement;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.web.context.ContentContext;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.xdb.business.BaseDBStore;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.impl.QueryImpl;
import org.apache.shiro.util.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;

/**
 * com.inet.xportal.erp.bo.
 *
 * @author Phong Tran
 * @version $Id: ERPStockMovementBase.java Aug 16, 2018 10:53 phongtt $
 * @since 1.0
 */
public abstract class ERPStockMovementBase<T extends ERPStockMovement> extends ERPBaseBO<T> {
    protected static final Logger logger = LoggerFactory.getLogger(ERPStockMovementBase.class);

    @Inject
    protected ERPStockMovementBase(@ContentContext(context = CONTENT_CONTEXT_NAME) MagicContentBF businessFacade) {
        super(businessFacade, "erp_stock_movement");
    }

    /**
     * @param organId
     * @param refVoucher
     * @param refModule
     * @return
     * @throws WebOSBOException
     */
    public T loadByRefVoucher(String organId, String refVoucher, String refModule) throws WebOSBOException {
        final QueryImpl<JSONDB> query = new QueryImpl<>();
        query.field("organId").equal(organId);
        query.field("refVoucher").equal(refVoucher);
        query.field("refModule").equal(refModule);
        return super.load(query);
    }

    /**
     * @param organId
     * @param uuid
     * @return
     * @throws WebOSBOException
     */
    public T loadById(String organId, String uuid) throws WebOSBOException {
        final QueryImpl<JSONDB> query = new QueryImpl<>();
        query.field("organId").equal(organId);
        query.field(BaseDBStore.ID_KEY).equal(BaseDBStore.getId(uuid));
        return super.load(query);
    }

    /**
     * @param organId
     * @param code
     * @return
     * @throws WebOSBOException
     */
    public T loadByCode(String organId, String code) throws WebOSBOException {
        return loadByCode(organId, StringUtils.EMPTY_STRING, code);
    }

    /**
     * @param organId
     * @param outletId
     * @param code
     * @return
     * @throws WebOSBOException
     */
    public T loadByCode(String organId, String outletId, String code) throws WebOSBOException {
        final QueryImpl<JSONDB> query = new QueryImpl<>();
        query.field("organId").equal(organId);
        if (StringUtils.hasLength(outletId)) {
            query.field("outletId").equal(outletId);
        }
        query.field("code").equal(code);

        return super.load(query);
    }
}
