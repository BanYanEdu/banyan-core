/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.global.dataservice;

import java.util.Map;

import javax.inject.Inject;
import javax.inject.Named;

import org.apache.shiro.util.StringUtils;

import com.inet.calista.common.CalistaConstant;
import com.inet.calista.global.bo.GlbOrganizationBO;
import com.inet.calista.global.model.GlbOrganization;
import com.inet.xportal.module.web.api.MngmFactoryManager;
import com.inet.xportal.module.web.model.FirmInformation;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.RestEasy3Util;
import com.inet.xportal.web.util.XParamUtils;

import net.sf.json.JSONObject;

/**
 * Verify a firm registered after login successfully.
 *
 * @author Phong Tran
 * @version $Id: VerifyProfileService.java Nov 12, 2018 14:49 phongtt $
 * @since 1.0
 */
@Named("glorganprofileverify")
@XPortalDataService(description = CalistaConstant.ROLE_COMMUNITY_DESC)
@XPortalPageRequest(uri = "gl/organ/profile/verify", transaction = true, inherit = true, result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class OrganVerifyService extends GlbAbstraction {
	private static String API_THONG_TIN_DOANH_NGHIEP = "https://thongtindoanhnghiep.co/api/company/";

	@Inject
	private GlbOrganizationBO organBO;

	/*
	 * (non-Javadoc)
	 * @see com.inet.xportal.module.web.plugin.dataservice.PluginSubfirmAbstraction#service(com.inet.xportal.nosql.web.model.SiteDataModel, com.inet.xportal.nosql.web.model.SubFirmProfile, com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
	 */
	@Override
	protected WebDataService service(final SiteDataModel site, 
			final SubFirmProfile profile,
			final AbstractBaseAction action, 
			final Map<String, Object> params) throws WebOSBOException 
	{
		GlbOrganization info = null;
		String uriPrefix = XParamUtils.getString("uriPrefix", params, StringUtils.EMPTY_STRING);
		String taxCode = XParamUtils.getString("taxCode", params, StringUtils.EMPTY_STRING);
		final JSONObject exfirm = StringUtils.hasLength(taxCode) ? 
				apiTaxCode(taxCode, XParamUtils.getString("country", params, action.getCountry())) : 
				new JSONObject();
				
		if (exfirm == null || exfirm.isEmpty())
			taxCode = StringUtils.EMPTY_STRING;
		
		if (StringUtils.hasLength(uriPrefix)) 
		{
			final FirmInformation firm = MngmFactoryManager.INSTANCE.service().orgByPrefix(site, 
					uriPrefix,
					StringUtils.EMPTY_STRING);
			logger.debug("found firm {} by prefix {}", firm, uriPrefix);

			// migrate firm to global organization
			if (firm != null && StringUtils.hasLength(firm.getOrganId())) 
			{
				info = organBO.loadByOrganId(firm.getOrganId());
				if (info == null) 
				{
					info = organBO.organizationBuilder(firm);
					if (StringUtils.hasLength(taxCode))
						info.setTaxCode(taxCode);
					info.setUuid(organBO.add(info));
				}
			}
		}

		if (exfirm != null && !exfirm.isEmpty())
			return new ObjectWebDataservice<>(exfirm);
		
		if (info == null)
			info = new GlbOrganization();

		return new ObjectWebDataservice<>(info);
	}

	/**
	 * 
	 * @param taxCode
	 * @param country
	 * @return
	 * @throws WebOSBOException
	 */
	private JSONObject apiTaxCode(String taxCode, String country) throws WebOSBOException 
	{
		if ("vi".equalsIgnoreCase(country))
		{
			try 
			{
				String result = RestEasy3Util.getJson(API_THONG_TIN_DOANH_NGHIEP + taxCode);
				return JSONObject.fromObject(result);
			} catch (Throwable ex) {
				// ignore exception
			}
		}
		
		return null;
	}
}
