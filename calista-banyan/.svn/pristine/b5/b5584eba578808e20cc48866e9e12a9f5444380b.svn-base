/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.pos.retail.service.purchase;

import com.inet.calista.erp.ERPConstant;
import com.inet.calista.erp.message.ERPBookMessage;
import com.inet.calista.pos.retail.bo.POSPurchaseBO;
import com.inet.calista.pos.retail.data.POSModule;
import com.inet.calista.pos.retail.data.POSPurchaseItem;
import com.inet.calista.pos.retail.model.POSPurchase;
import com.inet.calista.pos.retail.service.common.POSRetailAbstraction;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.deployer.ConfigureLoader;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.util.SecurityUtil;
import com.inet.xportal.web.util.XParamUtils;
import net.sf.json.JSONObject;
import org.apache.shiro.util.StringUtils;
import org.bson.types.ObjectId;

import javax.inject.Inject;
import java.util.Map;

/**
 * com.inet.xportal.erp.dataservice.
 *
 * @author Phong Tran
 * @version $Id: POSPriceListAbstraction.java May 07, 2018 14:08 phongtt $
 * @since 1.0
 */
public abstract class POSPurchaseAbstraction extends POSRetailAbstraction {

    @Inject
    protected POSPurchaseBO purchaseBO;

    /**
     * @param organId
     * @param outletId
     * @param code
     */
    public final void fireEvent(String organId, String outletId, String code) {
        String module = purchaseBO.getModule();
        if (StringUtils.hasLength(module)) {
            //fire event message
            new ERPBookMessage()
                    .withModule(module)
                    .withOrganId(organId)
                    .withOutletId(outletId)
                    .withVoucherId(code)
                    .execute();
        }
    }

    /**
     * @param info
     * @param item
     * @param action
     */
    public final void analysis(final POSPurchase info, final POSPurchaseItem item, final AbstractBaseAction action) {
        if (ConfigureLoader.INSTANCE.getAnalytics().dataLake()) {
            logger.debug("analysis data beginning ...");
            try {
                final JSONObject data = new JSONObject();

                data.put("country", action.getCountry());
                data.put("city", StringUtils.EMPTY_STRING);
                data.put("organId", info.getOrganId());
                data.put("outletId", info.getOutletId());
                data.put("employeeId", info.getEmployeeId());
                data.put("salesmanId", StringUtils.EMPTY_STRING);
                data.put("supplierId", info.getSupplierId());
                data.put("customerId", StringUtils.EMPTY_STRING);

                data.put("module", purchaseBO.getModule());
                data.put("voucherCode", info.getCode());

                data.put("currencyId", info.getCurrencyId());
                data.put("rate", info.getRate());

                data.put("itemCode", item.getProdCode());
                data.put("sku", item.getSku());
                data.put("category", item.getGroup());

                data.put("quantity", item.getQty());
                data.put("price", item.getPrice());
                data.put("amount", item.getAmount());

                data.put("group1", StringUtils.EMPTY_STRING);
                data.put("group2", StringUtils.EMPTY_STRING);
                data.put("group3", StringUtils.EMPTY_STRING);
                data.put("group4", StringUtils.EMPTY_STRING);
                data.put("group5", StringUtils.EMPTY_STRING);

                ConfigureLoader.INSTANCE.getAnalytics().events("retail_analytics", data);
            } catch (Throwable ex) {
                logger.error("analysis Data fail {}", ex);
            }

        }
    }

    /**
     * @param info
     * @param action
     * @throws WebOSBOException
     */
    public void invoiceCheck(final POSPurchase info, final AbstractBaseAction action) throws WebOSBOException {
        if (!StringUtils.hasLength(info.getCode())) {
            logger.error("code is required!");
            action.fieldError("PURCHASE", "CODE_NOT_FOUND");
        }

        if (!StringUtils.hasLength(info.getUuid())) {
            if (purchaseBO.checkCodeExists(info.getOrganId(), info.getOutletId(), info.getCode())) {
                logger.error("Invoice {} is exists.", info.getCode());
                action.fieldError("PURCHASE", "CODE_EXISTS");
            }
        }

        if (info.getCreateDate() == 0) {
            info.setCreateDate(System.currentTimeMillis());
        }

        if (!StringUtils.hasLength(info.getCurrencyId())) {
            info.setCurrencyId(ERPConstant.CURRENCY);
            info.setRate(1);
        }
    }

    /**
     * @param item
     * @param action
     * @throws WebOSBOException
     */
    public void itemCheck(final POSPurchaseItem item, final AbstractBaseAction action) throws WebOSBOException {
        if (!StringUtils.hasLength(item.getUuid())) {
            item.setUuid(new ObjectId().toHexString());

            if (!StringUtils.hasLength(item.getProdCode())) {
                logger.error("Code is required!");
                action.fieldError("PURCHASEITEM", "CODE_NOT_FOUND");
            }

            if (!StringUtils.hasLength(item.getProdName())) {
                logger.error("Name is required!");
                action.fieldError("PURCHASEITEM", "NAME_NOT_FOUND");
            }

            if (!StringUtils.hasLength(item.getUnit())) {
                logger.error("Unit is required!");
                action.fieldError("PURCHASEITEM", "UNIT_NOT_FOUND");
            }

            if (item.getQty() <= 0) {
                logger.error("Qty is greater than 0!");
                action.fieldError("PURCHASEITEM", "QTY_GREATER_0");
            }
        }
    }

    /**
     * @param organId
     * @param outletId
     * @param code
     * @return
     * @throws WebOSBOException
     */
    public POSPurchase invoiceLoad(String organId, String outletId, String code) throws WebOSBOException {
        return purchaseBO.loadByCode(organId, outletId, code);
    }

    /**
     * @param organId
     * @param code
     * @return
     * @throws WebOSBOException
     */
    public POSPurchase invoiceLoad(String organId, String code) throws WebOSBOException {
        return purchaseBO.loadByCode(organId, StringUtils.EMPTY_STRING, code);
    }

    /**
     * @param siteData
     * @param subFirm
     * @param action
     * @param params
     * @return
     * @throws WebOSBOException
     */
    public POSPurchase invoiceCreate(final SiteDataModel siteData,
                                     final SubFirmProfile subFirm,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String organId = getOrganId(siteData, subFirm);
        String outletId = StringUtils.EMPTY_STRING;

        final POSPurchase info = action.getModel(POSPurchase.class);
        info.setOrganId(organId);
        info.setModule(POSModule.PUR_RETAIL.name());
        info.setEmployeeId(XParamUtils.getString("employeeId", params, SecurityUtil.getPrincipal()));
        info.setEmployeeName(XParamUtils.getString("employeeName", params, SecurityUtil.getAlias()));
        info.setCode(purchaseBO.counterGenerate(organId, outletId, info.getCode()));

        invoiceCheck(info, action);

        info.setUuid(purchaseBO.add(info));

        return info;
    }
}
