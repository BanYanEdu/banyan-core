/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.pos.common.service.product;

import com.inet.calista.pos.common.POSConstant;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.data.IdentityDTO;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;

import javax.inject.Named;
import java.util.Map;

/**
 * com.inet.platform.pos.service.product.
 *
 * @author Phong Tran
 * @version $Id: ScanCodeImageService.java Jun 14, 2018 14:59 phongtt $
 * @since 1.0
 */
@Named("posscancodeimage")
@XPortalDataService(roles = {POSConstant.ROLE_PRODUCT}, description = POSConstant.ROLE_PRODUCT_DESCRIPTION)
@XPortalPageRequest(uri = "pos/scancode/image",
        inherit = true,
        action = WebConstant.FILE_DOWNLOAD_ACTON,
        result = WebConstant.ACTION_XSTREAM_CACHE_RESULT)
public class ScanCodeImageService extends POSProductAbstraction {

    //@Inject
    //private POSScanCodeBO scanCodeBO;

    @Override
    protected WebDataService service(final SiteDataModel siteData,
                                     final SubFirmProfile subFirm,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {

        /*String code = XParamUtils.getString("scancode", params, StringUtils.EMPTY_STRING);

        final POSScanCode scanCode = scanCodeBO.loadScanCode(getOrganId(siteData, subFirm), StringUtils.EMPTY_STRING, code);
        if (scanCode == null) {
            logger.error("ScanCode {} is not found.", code);
            action.fieldError("SCANCODE", "SCANCODE_MISSED");
        }

        try {
            if (action instanceof FileDownloadAction) {
                int orientation = XParamUtils.getInteger("orientation", params, 0);

                FileDownloadAction downloadAction = (FileDownloadAction) action;
                downloadAction.setContentDispostion("inline");
                downloadAction.setFileName("");
                downloadAction.setInputStream(new ByteArrayInputStream(
                        BarcodeUtils.barcodeImage(code, CodeBean.CODE128, orientation))
                );

                downloadAction.setContentType(BarcodeUtils.BARCODE_IMAGE_MIMETYPE);
            }
        } catch (IOException ex) {
            logger.error("ScanCode {} image generator fail. {}", code, ex);
            action.getViolation().add(new ViolationDTO("SCANCODE", "SCANCODE", 1, "SCANCODE_ID_FAIL"));
            throw new WebOSBOException("Bad request!");
        }*/

        return new ObjectWebDataservice<>(new IdentityDTO("SUCCESS"));
    }
}
