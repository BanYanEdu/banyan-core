/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.pos.common.service.product;

import com.inet.calista.pos.common.POSConstant;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Named;
import java.util.Map;

/**
 * com.inet.platform.pos.service.product.
 *
 * @author Phong Tran
 * @version $Id: ScanCodeGeneratorService.java Jun 14, 2018 13:41 phongtt $
 * @since 1.0
 */
@Named("posscancodesearch")
@XPortalDataService(roles = {POSConstant.ROLE_PRODUCT}, description = POSConstant.ROLE_PRODUCT_DESCRIPTION)
@XPortalPageRequest(uri = "pos/scancode/search",
        inherit = true,
        transaction = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class ScanCodeSearchService extends POSProductAbstraction {

    //@Inject
    //private POSScanCodeBO scanCodeBO;

    @Override
    protected WebDataService service(final SiteDataModel siteData,
                                     final SubFirmProfile subFirm,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String organId = getOrganId(siteData, subFirm);
        String outletId = StringUtils.EMPTY_STRING;

        String group = XParamUtils.getString("group", params, StringUtils.EMPTY_STRING);
        String keyword = XParamUtils.getString("keyword", params, StringUtils.EMPTY_STRING);

        int pageNumber = getPageNumber(params, 0);
        int limit = getPageSize(params, 0);
        int offset = pageNumber * limit;

        /*final SearchDTO<POSScanCode> data = scanCodeBO.query(organId, outletId,
                XParamUtils.getInteger("type", params, -1),
                group, keyword,
                limit, offset);

        if (data != null && data.getTotal() > 0) {
            final List<JSONObject> objects = new ArrayList<>();
            for (POSScanCode item : data.getItems()) {
                final JSONObject object = JSONObject.fromObject(item);

                final POSItem product = scanCodeBO.getProductBO().loadByCode(organId, item.getProdCode());
                if (product != null) {
                    object.put("prodInfo", product);
                }

                final POSBarcode barcode = scanCodeBO.getBarcodeBO().loadBySku(organId, outletId, item.getSku());
                if (barcode != null) {
                    object.put("barcodeInfo", barcode);
                }

                objects.add(object);
            }

            return new ObjectWebDataservice<>(new SearchDTO<>(objects, data.getTotal()));
        }*/

        return new ObjectWebDataservice<>(new SearchDTO<>());
    }
}
