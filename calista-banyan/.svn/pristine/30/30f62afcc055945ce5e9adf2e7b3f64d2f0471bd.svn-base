/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.global.registservice;

import com.inet.calista.common.CalistaConstant;
import com.inet.calista.global.bo.GlbContactBO;
import com.inet.calista.global.bo.GlbOrganizationBO;
import com.inet.calista.global.model.GlbContact;
import com.inet.calista.global.model.GlbInvitation;
import com.inet.calista.global.model.GlbOrganization;
import com.inet.xportal.nosql.web.NoSQLConstant;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.SecurityUtil;
import com.inet.xportal.web.util.XParamUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * com.inet.calista.global.service.contact.profile.
 *
 * @author Phong Tran
 * @version $Id: InvitationProfileService.java Nov 09, 2018 10:18 phongtt $
 * @since 1.0
 */
@Named("glcontactprofileinvitation")
@XPortalDataService(roles = {NoSQLConstant.ROLE_SUBADMIN}, description = CalistaConstant.ROLE_SUB_ADMIN_DESC)
@XPortalPageRequest(uri = "gl/contact/profile/invitation",
        inherit = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class RegisterInviteService extends RegisterAbstraction {
    @Inject
    private GlbContactBO contactBO;

    @Inject
    private GlbOrganizationBO organBO;


    @Override
    protected WebDataService service(final SiteDataModel site,
                                     final SubFirmProfile subFirm,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        final List<GlbInvitation> invites = new ArrayList<>();

        String organId = getOrganId(site, subFirm);
        final GlbOrganization glbOrgan = organBO.loadByOrganId(organId);
        logger.debug("found organ {} with {}", glbOrgan, organId);
        if (glbOrgan != null) {
            String sendBy = SecurityUtil.getPrincipal();
            final GlbContact glbContact = contactBO.loadByUserCode(sendBy);

            String emails = XParamUtils.getString("emails", params, StringUtils.EMPTY_STRING);
            String users = XParamUtils.getString("users", params, StringUtils.EMPTY_STRING);
            String phones = XParamUtils.getString("phones", params, StringUtils.EMPTY_STRING);


            if (StringUtils.hasLength(emails)) {
                for (String email : emails.split(";")) {
                    final GlbInvitation existsInvite = inviteBO.checkEmailInvite(organId, email);
                    if (existsInvite == null) {
                        String username = StringUtils.EMPTY_STRING;
                        String phone = StringUtils.EMPTY_STRING;

                        String fName = XParamUtils.getString("firstName", params, StringUtils.EMPTY_STRING);
                        String mName = XParamUtils.getString("middleName", params, StringUtils.EMPTY_STRING);
                        String lName = XParamUtils.getString("lastName", params, StringUtils.EMPTY_STRING);

                        final GlbInvitation glbInvitation = addInvite(glbContact, glbOrgan,
                                username, email, phone,
                                fName, mName, lName,
                                action, params);

                        if (glbInvitation != null) {
                            invites.add(glbInvitation);

                            sendInvite(glbInvitation, glbOrgan, action);
                        }
                    } else {
                        invites.add(existsInvite);
                    }
                }
            } else if (StringUtils.hasLength(users)) {
                for (String username : users.split(";")) {
                    final GlbInvitation existsInvite = inviteBO.checkUserInvite(organId, username);
                    if (existsInvite == null) {
                        final GlbContact receiver = contactBO.loadByUserCode(username);
                        if (receiver != null) {
                            String email = receiver.getUserCode();
                            if (StringUtils.hasLength(receiver.getPrimaryEmail())) {
                                email = receiver.getPrimaryEmail();
                            }
                            String phone = receiver.getHomePhone();

                            String fName = receiver.getFirstName();
                            String mName = receiver.getMiddleName();
                            String lName = receiver.getLastName();

                            final GlbInvitation glbInvitation = addInvite(glbContact, glbOrgan,
                                    username, email, phone,
                                    fName, mName, lName,
                                    action, params);

                            if (glbInvitation != null) {
                                invites.add(glbInvitation);

                                sendInvite(glbInvitation, glbOrgan, action);
                            }
                        }
                    } else {
                        invites.add(existsInvite);
                    }
                }
            }
        }


        return new ObjectWebDataservice<>(new SearchDTO<>(invites, invites.size()));
    }


}
