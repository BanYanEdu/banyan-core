package com.inet.calista.crm.service.setting.employee;

import com.google.common.base.Strings;
import com.inet.calista.crm.bo.setting.EmployeeBo;
import com.inet.calista.crm.constant.CommonConstant;
import com.inet.calista.crm.model.setting.internal.Employee;
import com.inet.calista.crm.service.CRMAbstractService;
import com.inet.calista.crm.service.constant.ErrorCode;
import com.inet.calista.crm.service.constant.Roles;
import com.inet.calista.crm.service.exception.CRMBusinessException;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.SecurityUtil;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.util.StringUtils;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.Map;

/**
 * AbSaveService.
 *
 * @author thoangtran
 * @version AbSaveService 2018 04-10 16:15
 */
@Named("crm_setting_empls_saveservice")
@XPortalDataService(roles = { Roles.SETTING_EMPLOYEE}, description = "Manage employee")
@XPortalPageRequest(uri = "crm/setting/empls/save", transaction = true, inherit = true,  result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
@Slf4j
public class SaveService extends CRMAbstractService {
  @Inject
  private EmployeeBo employeeBo;
  @Override
  protected WebDataService service(SiteDataModel site, SubFirmProfile firmProfile, AbstractBaseAction action, Map<String, Object> params) throws WebOSBOException {
    try{
      log.debug("Save employee with params {}", params);
      final Employee employee = action.getModel(Employee.class);
        employee.setUuid(StringUtils.EMPTY_STRING);
      if(Strings.isNullOrEmpty(employee.getUsername())){
        putError(action, CommonConstant.USERNAME, ErrorCode.must_not_empty);
        return FAILURE_RESULT;
      }

      if(Strings.isNullOrEmpty(employee.getMobilePhone())){
        putError(action, CommonConstant.MOBILE_PHONE, ErrorCode.must_not_empty);
        return FAILURE_RESULT;
      }

      if(Strings.isNullOrEmpty(employee.getPrimaryEmail())){
        putError(action, CommonConstant.PRIMARY_EMAIL, ErrorCode.must_not_empty);
        return FAILURE_RESULT;
      }

      if(params.containsKey(CommonConstant.ADDRESS_STR)){
        //employee.setAddress(Address.transform(JsonUtils.toJsonObject(XParamUtils.getString(CommonConstant.ADDRESS_STR, params))));
      }
      employee.setCreatedBy(SecurityUtil.getPrincipal());
      employee.setOrgCode(firmProfile.getOrganiId());

      return new ObjectWebDataservice<>(employeeBo.save(employee));

    } catch (Exception ex) {
      CRMBusinessException iex = new CRMBusinessException("Error occurs during saving employee information", ex);
      // log error
      log.error(iex.getMessage(), iex);
      putServiceError(action);

      throw iex;
    }
  }
}
