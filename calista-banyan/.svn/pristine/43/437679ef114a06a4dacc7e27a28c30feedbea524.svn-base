/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.ecommerce.service.shop;

import com.inet.calista.ecommerce.ECMConstant;
import com.inet.calista.ecommerce.bo.ECMOrderBO;
import com.inet.calista.ecommerce.data.ECMOrderPayType;
import com.inet.calista.ecommerce.data.ECMShipper;
import com.inet.calista.ecommerce.model.ECMOrder;
import com.inet.calista.ecommerce.service.common.CommerceBaseAbstraction;
import com.inet.xportal.module.web.api.MngmFactoryManager;
import com.inet.xportal.module.web.model.PaymentTransaction;
import com.inet.xportal.sphere.model.CMSFirm;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.data.OrganizationDTO;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.Map;

/**
 * ShopOrderVerifyPaymentService.
 *
 * @author Phong Tran
 * @version $Id: ShopOrderVerifyPaymentService.java Dec 02, 2017 09:16 phongtt $
 * @since 1.0
 */
@Named("shoporderverifypayment")
@XPortalDataService(description = ECMConstant.ROLE_SHOP_DESCRIPTION)
@XPortalPageRequest(uri = "shop/order/verify/payment",
        inherit = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class ShopOrderVerifyPaymentService extends CommerceBaseAbstraction {
    @Inject
    private ECMOrderBO orderBO;

    /*
     * (non-Javadoc)
     * @see com.inet.xportal.web.interfaces.DataServiceMarker#service(com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected WebDataService service(final CMSFirm cmsfirm,
                                     final OrganizationDTO orgItem,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String orderId = XParamUtils.getString("orderId", params);
        final ECMOrder order = orderBO.loadByCode(orgItem.getOrganId(), orderId);
        validated(action, order, "ORDER", "ORDER_NOT_FOUND", String.format("order %s is not found", orderId));

        logger.debug("found payment type {}", order.getPaymentType());

        if (ECMOrderPayType.PAYMENT.name().equals(order.getPaymentType()) &&
                StringUtils.hasLength(order.getTransactionId()) &&
                order.getBuyer() != null) {

            String payerID = order.getBuyer().getUsername();
            if (!StringUtils.hasLength(payerID)) {
                payerID = order.getBuyer().getEmail();
            }

            final PaymentTransaction trans = MngmFactoryManager.INSTANCE
                    .service()
                    .paymentment(payerID, order.getTransactionId());

            logger.debug("found transaction {} with payer {} & id " + order.getTransactionId(), trans, payerID);

            if (trans != null) {
                logger.debug("transaction have response text {} & ID {}", trans.getResponseText(), trans.getResponseID());

                if (StringUtils.hasLength(trans.getResponseText()) &&
                        StringUtils.hasLength(trans.getResponseID())) {
                    order.setTransactionStatus(trans.getResponseText());

                    if ("00".equals(trans.getResponseID())) {
                        logger.debug("order payment completed !...");
                        order.setPaymentDate(System.currentTimeMillis());
                        order.setTotalPaidAmount(order.getTotalAmount());
                        order.calc();
                        order.setTransactionStatus("COMPLETED");
                    }
                    orderBO.update(order.getUuid(), order);
                }
            }
        } else {
            final ECMShipper shipper = action.getModel(ECMShipper.class);
            if (shipper != null && StringUtils.hasLength(shipper.getPhone())) {
                order.setPaymentDate(System.currentTimeMillis());
                order.setTotalPaidAmount(order.getTotalAmount());
                order.calc();
                orderBO.update(order.getUuid(), order);
            }
        }

        return new ObjectWebDataservice<>(order);
    }
}
