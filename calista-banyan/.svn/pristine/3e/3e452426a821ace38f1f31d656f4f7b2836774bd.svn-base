/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.ecommerce.service.order;

import com.inet.calista.ecommerce.ECMConstant;
import com.inet.calista.ecommerce.data.ECMOrderItem;
import com.inet.calista.ecommerce.data.ECMProdOrder;
import com.inet.calista.ecommerce.model.ECMOrder;
import com.inet.calista.erp.masterdata.bo.ERPPriceDailyBO;
import com.inet.calista.erp.masterdata.model.ERPPriceDaily;
import com.inet.xportal.sphere.model.CMSFirm;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.context.WebContext;
import com.inet.xportal.web.data.OrganizationDTO;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Named;
import java.util.Map;

/**
 * com.inet.xportal.ecommerce.subfrmservice.order.
 *
 * @author Phong Tran
 * @version $Id: OrderItemAddService.java Sep 14, 2018 10:59 phongtt $
 * @since 1.0
 */
@Named("commerceorderitemadd")
@XPortalDataService(roles = {ECMConstant.ROLE_ORDER}, description = ECMConstant.ROLE_ORDER_DESCRIPTION)
@XPortalPageRequest(uri = "commerce/order/item/add",
        inherit = true,
        transaction = true,
        expose = 2,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class OrderItemAddService extends ECMOrderAbstraction {

    /*
     * (non-Javadoc)
     * @see com.inet.xportal.ecommerce.cmsservice.ProductContentBase#service(com.inet.xportal.sphere.model.CMSFirm, com.inet.xportal.web.data.OrganizationDTO, com.inet.xportal.ecommerce.model.CommerceProduct, com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected WebDataService service(final CMSFirm cmsfirm,
                                     final OrganizationDTO orgItem,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String organId = orgItem.getOrganId();
        String outletId = StringUtils.EMPTY_STRING;

        String infoCode = XParamUtils.getString("infoCode", params, StringUtils.EMPTY_STRING);
        ECMOrder info = null;
        if (StringUtils.hasLength(infoCode)) {
            info = invoiceLoad(organId, infoCode);
        } else {
            info = invoiceCreate(cmsfirm, orgItem, action, params);
        }

        if (info == null) {
            logger.error("invoice isn't create");
            action.fieldError("ORDER", "INFO_NOT_FOUND");
        }


        String barcode = XParamUtils.getString("barcode", params, StringUtils.EMPTY_STRING);
        final ECMOrderItem itemData = action.getModel(ECMOrderItem.class);
        itemData.setQty(XParamUtils.getFloat("qty", params, 1F));

        if (StringUtils.hasLength(barcode)) {
            final ECMProdOrder prodData = orderBO.loadProdOrder(organId, barcode);
            logger.debug("found prodData {} by barcode {}", prodData, barcode);

            if (!prodData.isNull()) {
                if (!prodData.isProdNull()) {
                    itemData.setProdId(prodData.getProduct().getUuid());
                    itemData.setProdCode(prodData.getProduct().getCode());
                    itemData.setProdName(prodData.getProduct().getName());
                    itemData.setUnit(prodData.getProduct().getUnit());
                    itemData.setPrice(prodData.getProduct().getPrice());
                    itemData.getProdInfo().put("scanCode", prodData.getProduct().getCode());
                }
            } else {
                logger.error("barcode {} is not found!", barcode);
                action.fieldError("ORDERITEM", "BARCODE_NOT_FOUND");
            }
        }

        itemCheck(itemData, action);

        int itemIndex = info.getItems().indexOf(itemData);
        if (itemIndex >= 0) {
            itemData.setQty(itemData.getQty() + info.getItems().get(itemIndex).getQty());

            info.getItems().remove(itemData);
        }

        final ERPPriceDaily priceDaily = WebContext.INSTANCE.cache()
                .getBean(ERPPriceDailyBO.class)
                .loadPriceForDay(
                        organId, ECMConstant.PRICELIST_SALE, outletId,
                        itemData.getProdCode(), info.getCurrencyId());

        if (priceDaily != null) {
            itemData.setPrice(priceDaily.getPrice());
        }
        itemData.calc();

        info.getItems().add(0, itemData);
        info.calc();

        orderBO.update(info.getUuid(), info);


        return new ObjectWebDataservice<>(info);
    }
}
