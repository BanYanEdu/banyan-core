/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.global.bo;

import javax.inject.Inject;
import javax.inject.Named;

import org.apache.shiro.util.StringUtils;

import com.inet.calista.common.CalistaConstant;
import com.inet.calista.global.GlobalConstant;
import com.inet.calista.global.model.GlbEmail;
import com.inet.xportal.module.web.model.FirmInformation;
import com.inet.xportal.module.web.plugin.BeanFirmInitiateInvoke;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.util.JSONUtil;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.context.ContentContext;
import com.inet.xportal.web.context.WebContext;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.BeanInitiateInvoke;
import com.inet.xportal.web.util.ResourceUtil;
import com.inet.xportal.xdb.business.BaseDBStore;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.impl.QueryImpl;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * 
 * GlbEmailBO.
 *
 * @author Hien Nguyen
 * @version $Id: GlbEmailBO.java Feb 11, 2020 9:11:20 AM $
 *
 * @since 1.0
 */
@Named("GlbEmailBO")
public class GlbEmailBO extends GlbNoSqlBO<GlbEmail> implements BeanInitiateInvoke, BeanFirmInitiateInvoke 
{

	/**
	 * @param businessFacade
	 */
	@Inject
	protected GlbEmailBO(@ContentContext(context = CalistaConstant.DB_CONTEXT) MagicContentBF businessFacade) {
		super(businessFacade, "gl_email_template");
	}

	/**
	 * @param template
	 * @return
	 * @throws WebOSBOException
	 */
	@Override
	public String add(GlbEmail template) throws WebOSBOException 
	{
		GlbEmail model = loadTemplate(template.getApplication(), 
				template.getOrganId(),
				template.getEmailCode(),
				template.getLanguage());

		if (model != null) {
			return model.getUuid();
		}

		return super.add(template);
	}

	/**
	 * @param organId
	 * @param application
	 * @return
	 * @throws WebOSBOException
	 */
	public long count(String organId, String application) throws WebOSBOException 
	{
		return super.count(queryBuilder(application, organId));
	}

	/**
	 * @param organId
	 * @param application
	 * @return
	 * @throws WebOSBOException
	 */
	public SearchDTO<GlbEmail> query(String organId, String application) throws WebOSBOException 
	{
		return super.query(queryBuilder(application, organId));
	}

	/**
	 * @param application
	 * @param organId
	 * @param code
	 * @param language
	 * @return
	 * @throws WebOSBOException
	 */
	public GlbEmail loadTemplate(String application, 
			String organId, 
			String code, 
			String language)
			throws WebOSBOException 
	{
		return super.load(queryBuilder(application, organId, code, language));
	}

	/**
	 * @param application
	 * @param organId
	 * @param code
	 * @param language
	 * @return
	 * @throws WebOSBOException
	 */
	public boolean exists(String application, 
			String organId,
			String code, 
			String language)
			throws WebOSBOException 
	{
		return super.count(queryBuilder(application, organId, code, language)) > 0;
	}

	/**
	 * 
	 * @param organId
	 * @param application
	 * @param language
	 * @return
	 * @throws WebOSBOException
	 */
	public SearchDTO<GlbEmail> query(String organId, 
			String application, 
			String language) throws WebOSBOException 
	{
		final QueryImpl<JSONDB> query = new QueryImpl<>();
		query.field("organId").equal(organId);

		if (StringUtils.hasLength(application)) 
		{
			query.field("application").equal(application);
		}

		if (StringUtils.hasLength(language)) 
		{
			query.field("language").equal(language);
		}

		return super.query(query);
	}

	/**
	 * @param organId
	 * @param templateId
	 * @return
	 * @throws WebOSBOException
	 */
	public GlbEmail loadTemplate(String organId, String templateId) throws WebOSBOException {
		final QueryImpl<JSONDB> query = new QueryImpl<>();
		query.field("organId").equal(organId);
		query.field(BaseDBStore.ID_KEY).equal(BaseDBStore.getId(templateId));

		return super.load(query);
	}

	/*
	 * (non-Javadoc)
	 * @see com.inet.xportal.module.web.plugin.BeanFirmInitiateInvoke#firmInitiation(com.inet.xportal.module.web.model.FirmInformation)
	 */
	@Override
	public void firmInitiation(final FirmInformation profile) 
	{
		String application = WebContext.INSTANCE.cache().getApplication();
		logger.debug("firmInitiation profile {}", profile);

		// init firm template if any
		if (profile != null && count(profile.getOrganId(), application) <= 0) 
		{
			// init email template for organ with application
			final SearchDTO<GlbEmail> emails = query(GlobalConstant.CLOUD_MNGM, application);

			if (emails != null && emails.getTotal() > 0)
			{
				for (GlbEmail item : emails.getItems()) 
				{
					item.setUuid(StringUtils.EMPTY_STRING);
					item.setOrganId(profile.getOrganId());
					add(item);
				}
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.inet.xportal.web.interfaces.BeanInitiateInvoke#init()
	 */
	@Override
	public void init() 
	{
		ensureIndex("organId");
		ensureIndex("organId,application");
		ensureIndex("organId,language");
		ensureIndex("organId,application,language");
		ensureIndex("organId,application,emailCode,language");

		String application = WebContext.INSTANCE.cache().getApplication();
		// init email template for application
		if (count(GlobalConstant.CLOUD_MNGM, application) <= 0) 
		{
			try 
			{
				String fileEmailTemplate = String.format("%s-email-template.json", application);

				String json = ResourceUtil.getResourceAsString(fileEmailTemplate);
				if (StringUtils.hasLength(json)) 
				{
					JSONArray arrJson = ResourceUtil.getJsonAsArray(json);
					if (arrJson.size() > 0) 
					{
						for (int idx = 0; idx < arrJson.size(); idx++) 
						{
							GlbEmail item = JSONUtil.json2Bean(GlbEmail.class, (JSONObject) arrJson.get(idx));

							item.setApplication(application);
							item.setOrganId(GlobalConstant.CLOUD_MNGM);

							if (!StringUtils.hasLength(item.getLanguage()))
								item.setLanguage(WebConstant.DEFAULT_LANGUAGE_SUPPORTED);

							add(item);
						}
					}
				}
			} catch (Exception ex) {
				logger.error("init email application {} fail!", application);
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.inet.xportal.nosql.web.bo.SQLMagicBase#getClassConvetor()
	 */
	@Override
	protected Class<GlbEmail> getClassConvetor() {
		return GlbEmail.class;
	}
	
	/**
	 * @param application
	 * @param organId
	 * @return
	 */
	private QueryImpl<JSONDB> queryBuilder(String application, String organId) 
	{
		final QueryImpl<JSONDB> query = new QueryImpl<>();
		query.field("organId").equal(organId);
		query.field("application").equal(application);

		return query;
	}

	/**
	 * @param application
	 * @param organId
	 * @param code
	 * @param language
	 * @return
	 * @throws WebOSBOException
	 */
	private QueryImpl<JSONDB> queryBuilder(String application,
			String organId, 
			String code, 
			String language)
			throws WebOSBOException 
	{
		final QueryImpl<JSONDB> query = queryBuilder(application, organId);
		query.field("emailCode").equal(code);
		query.field("language").equal(language);
		return query;
	}
}
