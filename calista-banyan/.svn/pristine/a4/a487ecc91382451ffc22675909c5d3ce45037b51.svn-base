package com.inet.calista.crm.service.setting.sysconfig;

import com.inet.calista.crm.bo.setting.SystemConfigurationBo;
import com.inet.calista.crm.service.CRMAbstractService;
import com.inet.calista.crm.service.constant.Roles;
import com.inet.calista.crm.service.exception.CRMBusinessException;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.Map;

/**
 * FindAllService.
 *
 * @author thoangtran
 * @version FindAllService 2018 04-09 09:29
 */
@Named("crm_setting_sysconf_fall")
@XPortalDataService(roles = { Roles.SETTING_CONFIG}, description = "System config role")
@XPortalPageRequest(uri = "crm/setting/sys-config/fall", transaction = true, inherit = true,  result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
@Slf4j
public class FindAllService extends CRMAbstractService {
  @Inject
  private SystemConfigurationBo bo;

  @Override
  protected WebDataService service(final SiteDataModel site,final  SubFirmProfile firmProfile,
                                   final  AbstractBaseAction action, Map<String, Object> params) throws WebOSBOException {
    try{
      log.debug("FindAllService: {}", params);
      String keywords = XParamUtils.getString("keywords", params);
      return new ObjectWebDataservice<>(bo.findByTenant(firmProfile.getOrganiId(), keywords));
    } catch (Exception ex) {
      CRMBusinessException iex = new CRMBusinessException("Error occurs during fall tenant configuration", ex);

      // log error
      //LOG.error(iex.getMessage(), iex);
      putServiceError(action);
      throw iex;
    }
  }
}
