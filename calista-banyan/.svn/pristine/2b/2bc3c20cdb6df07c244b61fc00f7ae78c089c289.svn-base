package com.inet.jobportal.bo.candidate;

import com.inet.jobportal.AppConstants;
import com.inet.jobportal.model.candidate.JobApp;
import com.inet.jobportal.model.candidate.JobAppStatus;
import com.inet.jobportal.model.common.Note;
import com.inet.jobportal.model.employer.JobPost;
import com.inet.jobportal.model.employer.SavedCandidate;
import com.inet.xportal.nosql.web.bf.MagicContentBF;
import com.inet.xportal.nosql.web.bo.MagicContentBO;
import com.inet.xportal.nosql.web.data.SearchDTO;
import com.inet.xportal.web.context.ContentContext;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.BeanInitiateInvoke;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.Query;
import com.inet.xportal.xdb.query.impl.QueryImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.ArrayList;
import java.util.List;

/**
 * Job Portal JobApp BO.
 *
 * @author Nguyen Duy Tan
 * @version $Id: JobAppBO.java Jan 10, 2019 3:24:24 PM nguyen_dv $
 *
 * @since 1.0
 */
@Named("JobAppBO")
public class JobAppBO extends MagicContentBO<JobApp> implements BeanInitiateInvoke {
    private static final Logger logger = LoggerFactory.getLogger(JobApp.class);

    @Inject
    public JobAppBO(@ContentContext(context = AppConstants.DB_CONTEXT) MagicContentBF businessFacade) {
        super(businessFacade, "jobportal_candidate_jobapp");
    }

    @Override
    public String add(JobApp item) throws WebOSBOException {
        return super.add(item);
    }

    @Override
    public void update(String uuid, JobApp item) throws WebOSBOException {
        super.update(uuid, item);
    }

    public void updateStatus(String uuid, JobAppStatus status) throws WebOSBOException {
//        String uuid = status.getStatusLinkId();
        Query<JSONDB> query = new QueryImpl<JSONDB>().field("uuid").equal(uuid);
        JobApp jobApp= this.search(query).getItems().get(0);

        jobApp.setStatus(status);
        super.update(uuid, jobApp);
    }

    public void hide(String uuid) throws WebOSBOException {
//        String uuid = status.getStatusLinkId();
        Query<JSONDB> query = new QueryImpl<JSONDB>().field("uuid").equal(uuid);
        JobApp jobApp= this.search(query).getItems().get(0);

        jobApp.setHidden(true);
        super.update(uuid, jobApp);
    }

    public void addNote(String uuid, Note note) throws WebOSBOException {
        Query<JSONDB> query = new QueryImpl<JSONDB>().field("uuid").equal(uuid);
        JobApp jobApp= this.search(query).getItems().get(0);

        List<Note> notes = jobApp.getNotes();
        if (notes != null) {
            notes.add(note);
        } else {
            notes = new ArrayList<>();
            notes.add(note);
        }

        jobApp.setNotes(notes);
        super.update(uuid, jobApp);
    }

    public SearchDTO<JobApp> search(Query<JSONDB> query) throws WebOSBOException {
        return super.query((QueryImpl<JSONDB>) query);
    }

    public void viewByEmployer(String uuid, Long date) throws WebOSBOException {
        Query<JSONDB> query = new QueryImpl<JSONDB>().field("uuid").equal(uuid);
        JobApp jobApp = this.search(query).getItems().get(0);

        jobApp.setViewedByEmployer(true);
        jobApp.setViewedDate(date);

        super.update(uuid, jobApp);
    }

    @Override
    public void init() {
        // index this data from database
        ensureIndex("organId");
        ensureIndex("username");
        ensureIndex("jobpostId");
    }

    @Override
    protected Class<JobApp> getClassConvetor() {
        return JobApp.class;
    }
}
