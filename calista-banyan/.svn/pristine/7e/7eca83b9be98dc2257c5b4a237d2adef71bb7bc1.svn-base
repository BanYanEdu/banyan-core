/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.pos.common.service.group;

import com.inet.calista.pos.common.POSConstant;
import com.inet.calista.pos.common.bo.POSGroupBO;
import com.inet.calista.pos.common.bo.POSProductBO;
import com.inet.calista.pos.common.model.POSGroup;
import com.inet.calista.pos.common.service.common.POSAbstraction;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import com.inet.xportal.xdb.business.BaseDBStore;
import com.inet.xportal.xdb.persistence.JSONDB;
import com.inet.xportal.xdb.query.impl.QueryImpl;
import com.inet.xportal.xdb.query.impl.UpdateImpl;
import org.apache.shiro.util.CollectionUtils;
import org.bson.types.ObjectId;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * GroupRefreshService.
 *
 * @author Phong Tran
 * @version $Id: GroupRefreshService.java Dec 21, 2016 20:47 phongtt $
 * @since 1.0
 */
@Named("posgrouprefresh")
@XPortalDataService(roles = {POSConstant.ROLE_ADMIN}, description = POSConstant.ROLE_ADMIN_DESCRIPTION)
@XPortalPageRequest(uri = "pos/group/refresh",
        inherit = true,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class GroupRefreshService extends POSAbstraction {
    private static final Logger logger = LoggerFactory.getLogger(GroupRefreshService.class);

    @Inject
    private POSGroupBO groupBO;

    @Inject
    private POSProductBO productBO;

    /*
     * (non-Javadoc)
     * @see com.inet.xportal.web.interfaces.DataServiceMarker#service(com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected WebDataService service(final SiteDataModel siteData,
                                     final SubFirmProfile subFirm,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        String organId = getOrganId(siteData, subFirm);
        logger.debug("group is refreshing ......");
        final List<String> orphanedNodes = groupBO.orphaned(organId);

        if (!CollectionUtils.isEmpty(orphanedNodes)) {
            final List<ObjectId> objectIds = new ArrayList<>();
            for (String uuid : orphanedNodes) {
                objectIds.add(BaseDBStore.getId(uuid));
            }

            final QueryImpl<JSONDB> query = new QueryImpl<>();
            query.field(BaseDBStore.ID_KEY).in(objectIds);

            if (XParamUtils.getBoolean("remove", params, false)) {
                //remove orphaned
                groupBO.remove(query);

            } else if (XParamUtils.getBoolean("root", params, false)) {
                // change orphaned become root
                final UpdateImpl<JSONDB> update = new UpdateImpl<>();
                update.set("parent", "");
                groupBO.update(update, query);
            }
        }

        if (XParamUtils.getBoolean("prodGroupRoot", params, false)) {
            final List<String> groups = productBO.groups(organId);
            for (String gName : groups) {
                if (groupBO.loadByName(organId, gName) == null) {
                    final POSGroup group = new POSGroup();
                    group.setOrganId(organId);
                    group.setName(gName);
                    groupBO.add(group);
                }
            }
        }

        return new ObjectWebDataservice<>("SUCCESS");
    }
}
