/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.pos.common.service.product;

import com.inet.calista.pos.common.POSConstant;
import com.inet.calista.pos.common.model.POSItem;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.action.FileUploadAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Named;
import java.util.Map;

/**
 * ProductUpdateService.
 *
 * @author Phong Tran
 * @version $Id: ProductUpdateService.java Dec 21, 2016 20:47 phongtt $
 * @since 1.0
 */
@Named("posproductupdate")
@XPortalDataService(roles = {POSConstant.ROLE_PRODUCT}, description = POSConstant.ROLE_PRODUCT_DESCRIPTION)
@XPortalPageRequest(uri = "pos/product/update",
        inherit = true,
        transaction = true,
        action = WebConstant.FILE_UPLOAD_ACTON,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class ProductUpdateService extends POSProductAbstraction {
    /*
     * (non-Javadoc)
     * @see com.inet.xportal.ecommerce.dataservice.ProductContentBase#service(com.inet.xportal.sphere.model.CMSFirm, com.inet.xportal.web.data.OrganizationDTO, com.inet.xportal.ecommerce.model.CommerceProduct, com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected WebDataService service(final SiteDataModel siteData,
                                     final SubFirmProfile subFirm,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {

        String organId = getOrganId(siteData, subFirm);

        String prodId = XParamUtils.getString("prodId", params, StringUtils.EMPTY_STRING);

        final POSItem existed = productBO.loadById(organId, prodId);
        if (existed == null) {
            logger.error("product {} is not found.", prodId);
            action.fieldError("PRODUCT", "PRODUCT_NOT_FOUND");
        }

        // get update content
        final POSItem summary = action.getModel(POSItem.class);

        existed.setBrief(summary.getBrief());
        existed.setName(summary.getName());
        existed.setGroup(summary.getGroup());
        existed.setPrice(summary.getPrice());
        existed.setUnit(summary.getUnit());

        existed.setOutOfStock(summary.isOutOfStock());
        existed.setCogs(summary.getCogs());
        existed.setReorderMin(summary.getReorderMin());

        boolean isChanged = false;
        if (existed.isSaleOnPos() != summary.isSaleOnPos()) {
            isChanged = true;
        }

        existed.setSaleOnPos(summary.isSaleOnPos());

        // update status (if want to change)
        existed.setStatus(XParamUtils.getString("status", params, existed.getStatus()));

        propertiesBuilder(existed, params);

        imagesBuilder(siteData, subFirm, existed, (FileUploadAction) action, params);

        productBO.update(existed.getUuid(), existed);

        return new ObjectWebDataservice<>(existed);
    }
}
