/*
 * ****************************************************************
 *      Copyright (c) 2019 by Phongtt (phongtt@inetcloud.vn)
 *
 *      Licensed under the iNet Solutions Corp.,
 *      You may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.inetcloud.vn/licenses
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 * ****************************************************************
 */

package com.inet.calista.ecommerce.service.shop;

import com.inet.calista.ecommerce.ECMConstant;
import com.inet.calista.ecommerce.bo.ECMItemBO;
import com.inet.calista.ecommerce.bo.ECMOrderBO;
import com.inet.calista.ecommerce.data.ECMOrderItem;
import com.inet.calista.ecommerce.model.ECMItem;
import com.inet.calista.ecommerce.model.ECMOrder;
import com.inet.calista.ecommerce.service.common.CommerceBaseAbstraction;
import com.inet.xportal.sphere.model.CMSFirm;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.data.OrganizationDTO;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.XParamUtils;
import org.apache.shiro.util.CollectionUtils;
import org.apache.shiro.util.StringUtils;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.Map;

/**
 * ShopOrderItemAddService.
 *
 * @author Phong Tran
 * @version $Id: ShopOrderItemAddService.java Dec 02, 2017 09:16 phongtt $
 * @since 1.0
 */
@Named("shoporderitemupdate")
@XPortalDataService(description = ECMConstant.ROLE_SHOP_DESCRIPTION)
@XPortalPageRequest(uri = "shop/order/item/update",
        inherit = true,
        expose = 2,
        result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
public class ShopOrderItemUpdateService extends CommerceBaseAbstraction {
    @Inject
    private ECMOrderBO orderBO;

    @Inject
    private ECMItemBO productBO;

    /*
     * (non-Javadoc)
     * @see com.inet.xportal.web.interfaces.DataServiceMarker#service(com.inet.xportal.web.action.AbstractBaseAction, java.util.Map)
     */
    @Override
    protected WebDataService service(final CMSFirm cmsfirm,
                                     final OrganizationDTO orgItem,
                                     final AbstractBaseAction action,
                                     final Map<String, Object> params) throws WebOSBOException {
        ECMOrder order;
        String orderId = XParamUtils.getString("orderId", params, StringUtils.EMPTY_STRING);
        if (!StringUtils.hasLength(orderId)) {
            order = new ECMOrder();
            order.setCode(orderBO.uuidRandom());
            order.setOrganId(orgItem.getOrganId());
            order.setUuid(orderBO.add(order));
        } else {
            order = orderBO.loadByCode(orgItem.getOrganId(), orderId);
            validated(action, order, "ORDER", "ORDER_NOT_FOUND", String.format("order %s is not found", orderId));
        }

        String organId = XParamUtils.getString("organId", params, orgItem.getOrganId());
        String prodId = XParamUtils.getString("prodId", params, StringUtils.EMPTY_STRING);
        final ECMItem product = productBO.order(organId, prodId);
        validated(action, product, "ORDER", "PRODUCT_INVALID", String.format("product %s is invalid", prodId));

        float qty = XParamUtils.getFloat("qty", params, -1F);
        if (qty < 0 && qty != -1) {
            errors(action, "ORDER", "QTY_GT_0", "Qty is greater than or equal 0");
        }

        boolean isNewItem = true;
        if (!CollectionUtils.isEmpty(order.getItems())) {
            int index = order.getItems().indexOf(new ECMOrderItem().withProdCode(product.getCode()));
            if (index >= 0) {
                ECMOrderItem item = order.getItems().get(index);
                if (qty == -1) {
                    item.setQty(1);
                } else {
                    item.setQty(qty);
                }

                if (qty == 0) {
                    order.getItems().remove(item);
                } else {
                    item.calc();
                }

                isNewItem = false;
            }
        }

        if (isNewItem) {
            if (qty == -1) {
                qty = 1;
            }
            order.getItems().add(orderBO.newOrderItem(order, product, qty));
        }


        if (StringUtils.hasLength(order.getUuid())) {
            order.calc();
            orderBO.update(order.getUuid(), order);
        }

        return new ObjectWebDataservice<>(order);
    }
}
