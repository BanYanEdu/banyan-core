package com.inet.calista.crm.service.essentials.contact;

import com.google.common.base.Strings;
import com.inet.calista.crm.bo.essentials.ContactBo;
import com.inet.calista.crm.constant.CommonConstant;
import com.inet.calista.crm.model.common.Address;
import com.inet.calista.crm.model.essentials.Contact;
import com.inet.calista.crm.service.CRMAbstractService;
import com.inet.calista.crm.service.constant.ErrorCode;
import com.inet.calista.crm.service.constant.Roles;
import com.inet.calista.crm.service.exception.CRMBusinessException;
import com.inet.calista.crm.util.DateUtils;
import com.inet.calista.crm.util.JsonUtils;
import com.inet.xportal.nosql.web.model.SiteDataModel;
import com.inet.xportal.nosql.web.model.SubFirmProfile;
import com.inet.xportal.web.WebConstant;
import com.inet.xportal.web.action.AbstractBaseAction;
import com.inet.xportal.web.annotation.XPortalDataService;
import com.inet.xportal.web.annotation.XPortalPageRequest;
import com.inet.xportal.web.exception.WebOSBOException;
import com.inet.xportal.web.interfaces.ObjectWebDataservice;
import com.inet.xportal.web.interfaces.WebDataService;
import com.inet.xportal.web.util.SecurityUtil;
import com.inet.xportal.web.util.XParamUtils;
import lombok.extern.slf4j.Slf4j;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.Map;

/**
 * UpdateService.
 *
 * @author thoangtran
 * @version UpdateService 2018 04-14 11:38
 */
@Named("crm_essentials_contact_updateservice")
@XPortalDataService(roles = { Roles.ESSENTIALS_CONTACT}, description = "Contact role")
@XPortalPageRequest(uri = "crm/essentials/contact/update", transaction = true, inherit = true,  result = WebConstant.ACTION_XSTREAM_JSON_RESULT)
@Slf4j
public class UpdateService  extends CRMAbstractService {
  @Inject
  private ContactBo contactBo;

  @Override
  protected WebDataService service(final SiteDataModel site, final SubFirmProfile firmProfile, final AbstractBaseAction action, final Map<String, Object> params) throws WebOSBOException {
    try{
      Contact contact = action.getModel(Contact.class);
      if(Strings.isNullOrEmpty(contact.getUuid())){
        putError(action, CommonConstant.UUID, ErrorCode.must_not_empty);
        return FAILURE_RESULT;
      }
      Contact exist = contactBo.loadById(contact.getUuid(), firmProfile.getOrganiId());
      if(null == exist ) {
        putError(action, CommonConstant.UUID, ErrorCode.not_existed);
        return FAILURE_RESULT;
      }
      if(contact.getDateOfBirth() > 0){
        contact.setDateOfBirthIso(DateUtils.format(contact.getDateOfBirth()));
      }
      contact.setFullName(String.format("%s %s %s", contact.getLastName(), contact.getMiddleName(), contact.getFirstName()));
      contact.setPhoto(exist.getPhoto());
      contact.setModifiedDate(DateUtils.now().getTime());
      contact.setModifiedBy(SecurityUtil.getPrincipal());
      contact.setOrgCode(firmProfile.getOrganiId());
      contact.setCreatedBy(exist.getCreatedBy());
      contact.setCreatedDate(exist.getCreatedDate());
      if(params.containsKey(CommonConstant.ADDRESS_STR)){
        contact.setAddress(Address.transform(JsonUtils.toJsonObject(XParamUtils.getString(CommonConstant.ADDRESS_STR, params))));
      }
       contactBo.update(contact.getUuid(), contact);
      return new ObjectWebDataservice<>(contactBo.load(contact.getUuid()));
    } catch (Exception ex) {

      CRMBusinessException iex = new CRMBusinessException("Error occurs during updating contact", ex);
      // log error
      log.error(iex.getMessage(), iex);
      putServiceError(action);
      throw iex;
    }
  }
}
